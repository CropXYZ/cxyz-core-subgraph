// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddressStoreChanged extends ethereum.Event {
  get params(): AddressStoreChanged__Params {
    return new AddressStoreChanged__Params(this);
  }
}

export class AddressStoreChanged__Params {
  _event: AddressStoreChanged;

  constructor(event: AddressStoreChanged) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldAddressStore(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newAddressStore(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ClearedDiedHarvest extends ethereum.Event {
  get params(): ClearedDiedHarvest__Params {
    return new ClearedDiedHarvest__Params(this);
  }
}

export class ClearedDiedHarvest__Params {
  _event: ClearedDiedHarvest;

  constructor(event: ClearedDiedHarvest) {
    this._event = event;
  }

  get player(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get plotId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get diedStakedElement(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get onGuardTokenAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get onGuardTokenId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get newStakedElement(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get diedAmount(): i32 {
    return this._event.parameters[6].value.toI32();
  }

  get plotDeaths(): i32 {
    return this._event.parameters[7].value.toI32();
  }
}

export class ClearedHarvest extends ethereum.Event {
  get params(): ClearedHarvest__Params {
    return new ClearedHarvest__Params(this);
  }
}

export class ClearedHarvest__Params {
  _event: ClearedHarvest;

  constructor(event: ClearedHarvest) {
    this._event = event;
  }

  get player(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get plotId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get clearedStakedElement(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get onGuardTokenAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get onGuardTokenId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get newStakedElement(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get clearedAmount(): i32 {
    return this._event.parameters[6].value.toI32();
  }

  get plotClears(): i32 {
    return this._event.parameters[7].value.toI32();
  }
}

export class DismissedGuard extends ethereum.Event {
  get params(): DismissedGuard__Params {
    return new DismissedGuard__Params(this);
  }
}

export class DismissedGuard__Params {
  _event: DismissedGuard;

  constructor(event: DismissedGuard) {
    this._event = event;
  }

  get player(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get onGuardTokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get onGuardTokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get plotId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get deactivatedBoost(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }
}

export class HarvestedPlot extends ethereum.Event {
  get params(): HarvestedPlot__Params {
    return new HarvestedPlot__Params(this);
  }
}

export class HarvestedPlot__Params {
  _event: HarvestedPlot;

  constructor(event: HarvestedPlot) {
    this._event = event;
  }

  get player(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get plotId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get stakedElement(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get onGuardTokenAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get onGuardTokenId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get newStakedElement(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get harvestableAmount(): i32 {
    return this._event.parameters[6].value.toI32();
  }

  get actuallyProducedAmount(): i32 {
    return this._event.parameters[7].value.toI32();
  }

  get plotHarvests(): i32 {
    return this._event.parameters[8].value.toI32();
  }
}

export class MintedPlot extends ethereum.Event {
  get params(): MintedPlot__Params {
    return new MintedPlot__Params(this);
  }
}

export class MintedPlot__Params {
  _event: MintedPlot;

  constructor(event: MintedPlot) {
    this._event = event;
  }

  get minter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get season(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get plotTypeName(): string {
    return this._event.parameters[4].value.toString();
  }

  get plotTypeId(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get width(): i32 {
    return this._event.parameters[6].value.toI32();
  }

  get height(): i32 {
    return this._event.parameters[7].value.toI32();
  }

  get tileArea(): i32 {
    return this._event.parameters[8].value.toI32();
  }

  get baseGrowthSpeed(): i32 {
    return this._event.parameters[9].value.toI32();
  }

  get baseYield(): i32 {
    return this._event.parameters[10].value.toI32();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PulledAndPlacedGuard extends ethereum.Event {
  get params(): PulledAndPlacedGuard__Params {
    return new PulledAndPlacedGuard__Params(this);
  }
}

export class PulledAndPlacedGuard__Params {
  _event: PulledAndPlacedGuard;

  constructor(event: PulledAndPlacedGuard) {
    this._event = event;
  }

  get player(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get plotId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get onGuardTokenAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get onGuardTokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get destinationPlotOnGuardTokenAddress(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get destinationPlotOnGuardTokenId(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get sourcePlotId(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get sourceDeactivateBoost(): boolean {
    return this._event.parameters[7].value.toBoolean();
  }
}

export class RecalledGuard extends ethereum.Event {
  get params(): RecalledGuard__Params {
    return new RecalledGuard__Params(this);
  }
}

export class RecalledGuard__Params {
  _event: RecalledGuard;

  constructor(event: RecalledGuard) {
    this._event = event;
  }

  get player(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get onGuardTokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get onGuardTokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get plotId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get deactivatedBoost(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }
}

export class StakedCrop extends ethereum.Event {
  get params(): StakedCrop__Params {
    return new StakedCrop__Params(this);
  }
}

export class StakedCrop__Params {
  _event: StakedCrop;

  constructor(event: StakedCrop) {
    this._event = event;
  }

  get player(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get plotId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get stakedElement(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get stakedAmount(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get timeStartStaked(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get timeReadyDelta(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get timeExpiredDelta(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get onGuardTokenAddress(): Address {
    return this._event.parameters[7].value.toAddress();
  }

  get onGuardTokenId(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get onGuardBoost(): boolean {
    return this._event.parameters[9].value.toBoolean();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpdateBaseTokenURI extends ethereum.Event {
  get params(): UpdateBaseTokenURI__Params {
    return new UpdateBaseTokenURI__Params(this);
  }
}

export class UpdateBaseTokenURI__Params {
  _event: UpdateBaseTokenURI;

  constructor(event: UpdateBaseTokenURI) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldTokenURIHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newTokenURIHash(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get oldTokenURI(): string {
    return this._event.parameters[3].value.toString();
  }

  get newTokenURI(): string {
    return this._event.parameters[4].value.toString();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Plot__versionResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Plot__versionGameAssetResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Plot__versionGameStatusResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Plot__versionGameUtilResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Plot__versionSystemPointersResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Plot extends ethereum.SmartContract {
  static bind(address: Address): Plot {
    return new Plot("Plot", address);
  }

  AS_ENGINE_ADDRESS(): Bytes {
    let result = super.call(
      "AS_ENGINE_ADDRESS",
      "AS_ENGINE_ADDRESS():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_AS_ENGINE_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_ENGINE_ADDRESS",
      "AS_ENGINE_ADDRESS():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_GOLD_ADDRESS(): Bytes {
    let result = super.call(
      "AS_GOLD_ADDRESS",
      "AS_GOLD_ADDRESS():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_AS_GOLD_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_GOLD_ADDRESS",
      "AS_GOLD_ADDRESS():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_POOL_ADDRESS(): Bytes {
    let result = super.call(
      "AS_POOL_ADDRESS",
      "AS_POOL_ADDRESS():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_AS_POOL_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_POOL_ADDRESS",
      "AS_POOL_ADDRESS():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_ROLE_REGISTRY_ADDRESS(): Bytes {
    let result = super.call(
      "AS_ROLE_REGISTRY_ADDRESS",
      "AS_ROLE_REGISTRY_ADDRESS():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_AS_ROLE_REGISTRY_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_ROLE_REGISTRY_ADDRESS",
      "AS_ROLE_REGISTRY_ADDRESS():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_TEAM_ADDRESS(): Bytes {
    let result = super.call(
      "AS_TEAM_ADDRESS",
      "AS_TEAM_ADDRESS():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_AS_TEAM_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_TEAM_ADDRESS",
      "AS_TEAM_ADDRESS():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_TREASURY_ADDRESS(): Bytes {
    let result = super.call(
      "AS_TREASURY_ADDRESS",
      "AS_TREASURY_ADDRESS():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_AS_TREASURY_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_TREASURY_ADDRESS",
      "AS_TREASURY_ADDRESS():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_ADDRESS_CONTROLLER_ROLE(): Bytes {
    let result = super.call(
      "RR_ADDRESS_CONTROLLER_ROLE",
      "RR_ADDRESS_CONTROLLER_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_RR_ADDRESS_CONTROLLER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "RR_ADDRESS_CONTROLLER_ROLE",
      "RR_ADDRESS_CONTROLLER_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_GAME_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "RR_GAME_ADMIN_ROLE",
      "RR_GAME_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_RR_GAME_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "RR_GAME_ADMIN_ROLE",
      "RR_GAME_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_GAME_ROLE(): Bytes {
    let result = super.call("RR_GAME_ROLE", "RR_GAME_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_RR_GAME_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("RR_GAME_ROLE", "RR_GAME_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_OPERATOR_ROLE(): Bytes {
    let result = super.call(
      "RR_OPERATOR_ROLE",
      "RR_OPERATOR_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_RR_OPERATOR_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "RR_OPERATOR_ROLE",
      "RR_OPERATOR_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_PAUSER_ROLE(): Bytes {
    let result = super.call("RR_PAUSER_ROLE", "RR_PAUSER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_RR_PAUSER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "RR_PAUSER_ROLE",
      "RR_PAUSER_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_POOL_ROLE(): Bytes {
    let result = super.call("RR_POOL_ROLE", "RR_POOL_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_RR_POOL_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("RR_POOL_ROLE", "RR_POOL_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_TEAM_ROLE(): Bytes {
    let result = super.call("RR_TEAM_ROLE", "RR_TEAM_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_RR_TEAM_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("RR_TEAM_ROLE", "RR_TEAM_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_TREASURY_ROLE(): Bytes {
    let result = super.call(
      "RR_TREASURY_ROLE",
      "RR_TREASURY_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_RR_TREASURY_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "RR_TREASURY_ROLE",
      "RR_TREASURY_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_UPGRADER_ROLE(): Bytes {
    let result = super.call(
      "RR_UPGRADER_ROLE",
      "RR_UPGRADER_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_RR_UPGRADER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "RR_UPGRADER_ROLE",
      "RR_UPGRADER_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  addressStore(): Address {
    let result = super.call("addressStore", "addressStore():(address)", []);

    return result[0].toAddress();
  }

  try_addressStore(): ethereum.CallResult<Address> {
    let result = super.tryCall("addressStore", "addressStore():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  amountNeededToBeStaked(plotId: BigInt): i32 {
    let result = super.call(
      "amountNeededToBeStaked",
      "amountNeededToBeStaked(uint256):(uint16)",
      [ethereum.Value.fromUnsignedBigInt(plotId)]
    );

    return result[0].toI32();
  }

  try_amountNeededToBeStaked(plotId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "amountNeededToBeStaked",
      "amountNeededToBeStaked(uint256):(uint16)",
      [ethereum.Value.fromUnsignedBigInt(plotId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  amountStaked(plotId: BigInt): i32 {
    let result = super.call("amountStaked", "amountStaked(uint256):(uint16)", [
      ethereum.Value.fromUnsignedBigInt(plotId)
    ]);

    return result[0].toI32();
  }

  try_amountStaked(plotId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "amountStaked",
      "amountStaked(uint256):(uint16)",
      [ethereum.Value.fromUnsignedBigInt(plotId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseGrowthSpeed(plotId: BigInt): i32 {
    let result = super.call(
      "baseGrowthSpeed",
      "baseGrowthSpeed(uint256):(uint8)",
      [ethereum.Value.fromUnsignedBigInt(plotId)]
    );

    return result[0].toI32();
  }

  try_baseGrowthSpeed(plotId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "baseGrowthSpeed",
      "baseGrowthSpeed(uint256):(uint8)",
      [ethereum.Value.fromUnsignedBigInt(plotId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  baseYield(plotId: BigInt): i32 {
    let result = super.call("baseYield", "baseYield(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(plotId)
    ]);

    return result[0].toI32();
  }

  try_baseYield(plotId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("baseYield", "baseYield(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(plotId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  countOfClears(plotId: BigInt): i32 {
    let result = super.call(
      "countOfClears",
      "countOfClears(uint256):(uint24)",
      [ethereum.Value.fromUnsignedBigInt(plotId)]
    );

    return result[0].toI32();
  }

  try_countOfClears(plotId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "countOfClears",
      "countOfClears(uint256):(uint24)",
      [ethereum.Value.fromUnsignedBigInt(plotId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  countOfDeaths(plotId: BigInt): i32 {
    let result = super.call(
      "countOfDeaths",
      "countOfDeaths(uint256):(uint24)",
      [ethereum.Value.fromUnsignedBigInt(plotId)]
    );

    return result[0].toI32();
  }

  try_countOfDeaths(plotId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "countOfDeaths",
      "countOfDeaths(uint256):(uint24)",
      [ethereum.Value.fromUnsignedBigInt(plotId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  countOfHarvests(plotId: BigInt): i32 {
    let result = super.call(
      "countOfHarvests",
      "countOfHarvests(uint256):(uint24)",
      [ethereum.Value.fromUnsignedBigInt(plotId)]
    );

    return result[0].toI32();
  }

  try_countOfHarvests(plotId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "countOfHarvests",
      "countOfHarvests(uint256):(uint24)",
      [ethereum.Value.fromUnsignedBigInt(plotId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  gameEngine(): Address {
    let result = super.call("gameEngine", "gameEngine():(address)", []);

    return result[0].toAddress();
  }

  try_gameEngine(): ethereum.CallResult<Address> {
    let result = super.tryCall("gameEngine", "gameEngine():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  gameTokenReference(stakedElementId: BigInt): Address {
    let result = super.call(
      "gameTokenReference",
      "gameTokenReference(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(stakedElementId)]
    );

    return result[0].toAddress();
  }

  try_gameTokenReference(
    stakedElementId: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "gameTokenReference",
      "gameTokenReference(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(stakedElementId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getGuardId(onGuardTokenAddress: Address, onGuardTokenId: BigInt): Bytes {
    let result = super.call(
      "getGuardId",
      "getGuardId(address,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(onGuardTokenAddress),
        ethereum.Value.fromUnsignedBigInt(onGuardTokenId)
      ]
    );

    return result[0].toBytes();
  }

  try_getGuardId(
    onGuardTokenAddress: Address,
    onGuardTokenId: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getGuardId",
      "getGuardId(address,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(onGuardTokenAddress),
        ethereum.Value.fromUnsignedBigInt(onGuardTokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  goldAddress(): Address {
    let result = super.call("goldAddress", "goldAddress():(address)", []);

    return result[0].toAddress();
  }

  try_goldAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("goldAddress", "goldAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  guardAddress(plotId: BigInt): Address {
    let result = super.call("guardAddress", "guardAddress(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(plotId)
    ]);

    return result[0].toAddress();
  }

  try_guardAddress(plotId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "guardAddress",
      "guardAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(plotId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  guardId(plotId: BigInt): BigInt {
    let result = super.call("guardId", "guardId(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(plotId)
    ]);

    return result[0].toBigInt();
  }

  try_guardId(plotId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("guardId", "guardId(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(plotId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  guardPostedPlot(
    onGuardTokenAddress: Address,
    onGuardTokenId: BigInt
  ): BigInt {
    let result = super.call(
      "guardPostedPlot",
      "guardPostedPlot(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(onGuardTokenAddress),
        ethereum.Value.fromUnsignedBigInt(onGuardTokenId)
      ]
    );

    return result[0].toBigInt();
  }

  try_guardPostedPlot(
    onGuardTokenAddress: Address,
    onGuardTokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "guardPostedPlot",
      "guardPostedPlot(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(onGuardTokenAddress),
        ethereum.Value.fromUnsignedBigInt(onGuardTokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  harvestableYield(plotId: BigInt): i32 {
    let result = super.call(
      "harvestableYield",
      "harvestableYield(uint256):(uint16)",
      [ethereum.Value.fromUnsignedBigInt(plotId)]
    );

    return result[0].toI32();
  }

  try_harvestableYield(plotId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "harvestableYield",
      "harvestableYield(uint256):(uint16)",
      [ethereum.Value.fromUnsignedBigInt(plotId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  isActive(plotId: BigInt): boolean {
    let result = super.call("isActive", "isActive(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(plotId)
    ]);

    return result[0].toBoolean();
  }

  try_isActive(plotId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isActive", "isActive(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(plotId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isBoosted(plotId: BigInt): boolean {
    let result = super.call("isBoosted", "isBoosted(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(plotId)
    ]);

    return result[0].toBoolean();
  }

  try_isBoosted(plotId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isBoosted", "isBoosted(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(plotId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isGuardPosted(onGuardTokenAddress: Address, onGuardTokenId: BigInt): boolean {
    let result = super.call(
      "isGuardPosted",
      "isGuardPosted(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(onGuardTokenAddress),
        ethereum.Value.fromUnsignedBigInt(onGuardTokenId)
      ]
    );

    return result[0].toBoolean();
  }

  try_isGuardPosted(
    onGuardTokenAddress: Address,
    onGuardTokenId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isGuardPosted",
      "isGuardPosted(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(onGuardTokenAddress),
        ethereum.Value.fromUnsignedBigInt(onGuardTokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isStaked(plotId: BigInt): boolean {
    let result = super.call("isStaked", "isStaked(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(plotId)
    ]);

    return result[0].toBoolean();
  }

  try_isStaked(plotId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isStaked", "isStaked(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(plotId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pausedGame(): boolean {
    let result = super.call("pausedGame", "pausedGame():(bool)", []);

    return result[0].toBoolean();
  }

  try_pausedGame(): ethereum.CallResult<boolean> {
    let result = super.tryCall("pausedGame", "pausedGame():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  plotHeight(plotId: BigInt): i32 {
    let result = super.call("plotHeight", "plotHeight(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(plotId)
    ]);

    return result[0].toI32();
  }

  try_plotHeight(plotId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("plotHeight", "plotHeight(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(plotId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  plotType(plotId: BigInt): BigInt {
    let result = super.call("plotType", "plotType(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(plotId)
    ]);

    return result[0].toBigInt();
  }

  try_plotType(plotId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("plotType", "plotType(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(plotId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  plotTypeName(plotId: BigInt): string {
    let result = super.call("plotTypeName", "plotTypeName(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(plotId)
    ]);

    return result[0].toString();
  }

  try_plotTypeName(plotId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "plotTypeName",
      "plotTypeName(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(plotId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  plotWidth(plotId: BigInt): i32 {
    let result = super.call("plotWidth", "plotWidth(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(plotId)
    ]);

    return result[0].toI32();
  }

  try_plotWidth(plotId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("plotWidth", "plotWidth(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(plotId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  poolAddress(): Address {
    let result = super.call("poolAddress", "poolAddress():(address)", []);

    return result[0].toAddress();
  }

  try_poolAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("poolAddress", "poolAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  roleRegistry(): Address {
    let result = super.call("roleRegistry", "roleRegistry():(address)", []);

    return result[0].toAddress();
  }

  try_roleRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall("roleRegistry", "roleRegistry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  season(plotId: BigInt): i32 {
    let result = super.call("season", "season(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(plotId)
    ]);

    return result[0].toI32();
  }

  try_season(plotId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("season", "season(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(plotId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  stakedElement(plotId: BigInt): BigInt {
    let result = super.call(
      "stakedElement",
      "stakedElement(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(plotId)]
    );

    return result[0].toBigInt();
  }

  try_stakedElement(plotId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakedElement",
      "stakedElement(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(plotId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakedElementName(plotId: BigInt): string {
    let result = super.call(
      "stakedElementName",
      "stakedElementName(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(plotId)]
    );

    return result[0].toString();
  }

  try_stakedElementName(plotId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "stakedElementName",
      "stakedElementName(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(plotId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  timeExpiredDelta(plotId: BigInt): BigInt {
    let result = super.call(
      "timeExpiredDelta",
      "timeExpiredDelta(uint256):(uint64)",
      [ethereum.Value.fromUnsignedBigInt(plotId)]
    );

    return result[0].toBigInt();
  }

  try_timeExpiredDelta(plotId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "timeExpiredDelta",
      "timeExpiredDelta(uint256):(uint64)",
      [ethereum.Value.fromUnsignedBigInt(plotId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  timeReadyDelta(plotId: BigInt): BigInt {
    let result = super.call(
      "timeReadyDelta",
      "timeReadyDelta(uint256):(uint64)",
      [ethereum.Value.fromUnsignedBigInt(plotId)]
    );

    return result[0].toBigInt();
  }

  try_timeReadyDelta(plotId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "timeReadyDelta",
      "timeReadyDelta(uint256):(uint64)",
      [ethereum.Value.fromUnsignedBigInt(plotId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  timeStartStaked(plotId: BigInt): BigInt {
    let result = super.call(
      "timeStartStaked",
      "timeStartStaked(uint256):(uint64)",
      [ethereum.Value.fromUnsignedBigInt(plotId)]
    );

    return result[0].toBigInt();
  }

  try_timeStartStaked(plotId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "timeStartStaked",
      "timeStartStaked(uint256):(uint64)",
      [ethereum.Value.fromUnsignedBigInt(plotId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalMint(): BigInt {
    let result = super.call("totalMint", "totalMint():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalMint(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalMint", "totalMint():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treasuryAddress(): Address {
    let result = super.call(
      "treasuryAddress",
      "treasuryAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_treasuryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "treasuryAddress",
      "treasuryAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  version(): Plot__versionResult {
    let result = super.call(
      "version",
      "version():(uint256,uint256,uint256)",
      []
    );

    return new Plot__versionResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_version(): ethereum.CallResult<Plot__versionResult> {
    let result = super.tryCall(
      "version",
      "version():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Plot__versionResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  versionGameAsset(): Plot__versionGameAssetResult {
    let result = super.call(
      "versionGameAsset",
      "versionGameAsset():(uint256,uint256,uint256)",
      []
    );

    return new Plot__versionGameAssetResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_versionGameAsset(): ethereum.CallResult<Plot__versionGameAssetResult> {
    let result = super.tryCall(
      "versionGameAsset",
      "versionGameAsset():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Plot__versionGameAssetResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  versionGameStatus(): Plot__versionGameStatusResult {
    let result = super.call(
      "versionGameStatus",
      "versionGameStatus():(uint256,uint256,uint256)",
      []
    );

    return new Plot__versionGameStatusResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_versionGameStatus(): ethereum.CallResult<Plot__versionGameStatusResult> {
    let result = super.tryCall(
      "versionGameStatus",
      "versionGameStatus():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Plot__versionGameStatusResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  versionGameUtil(): Plot__versionGameUtilResult {
    let result = super.call(
      "versionGameUtil",
      "versionGameUtil():(uint256,uint256,uint256)",
      []
    );

    return new Plot__versionGameUtilResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_versionGameUtil(): ethereum.CallResult<Plot__versionGameUtilResult> {
    let result = super.tryCall(
      "versionGameUtil",
      "versionGameUtil():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Plot__versionGameUtilResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  versionSystemPointers(): Plot__versionSystemPointersResult {
    let result = super.call(
      "versionSystemPointers",
      "versionSystemPointers():(uint256,uint256,uint256)",
      []
    );

    return new Plot__versionSystemPointersResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_versionSystemPointers(): ethereum.CallResult<
    Plot__versionSystemPointersResult
  > {
    let result = super.tryCall(
      "versionSystemPointers",
      "versionSystemPointers():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Plot__versionSystemPointersResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  walletOfOwner(_owner: Address): Array<BigInt> {
    let result = super.call(
      "walletOfOwner",
      "walletOfOwner(address):(uint256[])",
      [ethereum.Value.fromAddress(_owner)]
    );

    return result[0].toBigIntArray();
  }

  try_walletOfOwner(_owner: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "walletOfOwner",
      "walletOfOwner(address):(uint256[])",
      [ethereum.Value.fromAddress(_owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ActionClearCall extends ethereum.Call {
  get inputs(): ActionClearCall__Inputs {
    return new ActionClearCall__Inputs(this);
  }

  get outputs(): ActionClearCall__Outputs {
    return new ActionClearCall__Outputs(this);
  }
}

export class ActionClearCall__Inputs {
  _call: ActionClearCall;

  constructor(call: ActionClearCall) {
    this._call = call;
  }

  get plotId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ActionClearCall__Outputs {
  _call: ActionClearCall;

  constructor(call: ActionClearCall) {
    this._call = call;
  }
}

export class ActionClearAndStakeCall extends ethereum.Call {
  get inputs(): ActionClearAndStakeCall__Inputs {
    return new ActionClearAndStakeCall__Inputs(this);
  }

  get outputs(): ActionClearAndStakeCall__Outputs {
    return new ActionClearAndStakeCall__Outputs(this);
  }
}

export class ActionClearAndStakeCall__Inputs {
  _call: ActionClearAndStakeCall;

  constructor(call: ActionClearAndStakeCall) {
    this._call = call;
  }

  get plotId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newStakedElement(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ActionClearAndStakeCall__Outputs {
  _call: ActionClearAndStakeCall;

  constructor(call: ActionClearAndStakeCall) {
    this._call = call;
  }
}

export class ActionClearDeadCall extends ethereum.Call {
  get inputs(): ActionClearDeadCall__Inputs {
    return new ActionClearDeadCall__Inputs(this);
  }

  get outputs(): ActionClearDeadCall__Outputs {
    return new ActionClearDeadCall__Outputs(this);
  }
}

export class ActionClearDeadCall__Inputs {
  _call: ActionClearDeadCall;

  constructor(call: ActionClearDeadCall) {
    this._call = call;
  }

  get plotId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ActionClearDeadCall__Outputs {
  _call: ActionClearDeadCall;

  constructor(call: ActionClearDeadCall) {
    this._call = call;
  }
}

export class ActionClearDeadAndStakeCall extends ethereum.Call {
  get inputs(): ActionClearDeadAndStakeCall__Inputs {
    return new ActionClearDeadAndStakeCall__Inputs(this);
  }

  get outputs(): ActionClearDeadAndStakeCall__Outputs {
    return new ActionClearDeadAndStakeCall__Outputs(this);
  }
}

export class ActionClearDeadAndStakeCall__Inputs {
  _call: ActionClearDeadAndStakeCall;

  constructor(call: ActionClearDeadAndStakeCall) {
    this._call = call;
  }

  get plotId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newStakedElement(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ActionClearDeadAndStakeCall__Outputs {
  _call: ActionClearDeadAndStakeCall;

  constructor(call: ActionClearDeadAndStakeCall) {
    this._call = call;
  }
}

export class ActionDismissGuardCall extends ethereum.Call {
  get inputs(): ActionDismissGuardCall__Inputs {
    return new ActionDismissGuardCall__Inputs(this);
  }

  get outputs(): ActionDismissGuardCall__Outputs {
    return new ActionDismissGuardCall__Outputs(this);
  }
}

export class ActionDismissGuardCall__Inputs {
  _call: ActionDismissGuardCall;

  constructor(call: ActionDismissGuardCall) {
    this._call = call;
  }

  get plotId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ActionDismissGuardCall__Outputs {
  _call: ActionDismissGuardCall;

  constructor(call: ActionDismissGuardCall) {
    this._call = call;
  }
}

export class ActionHarvestCall extends ethereum.Call {
  get inputs(): ActionHarvestCall__Inputs {
    return new ActionHarvestCall__Inputs(this);
  }

  get outputs(): ActionHarvestCall__Outputs {
    return new ActionHarvestCall__Outputs(this);
  }
}

export class ActionHarvestCall__Inputs {
  _call: ActionHarvestCall;

  constructor(call: ActionHarvestCall) {
    this._call = call;
  }

  get plotId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ActionHarvestCall__Outputs {
  _call: ActionHarvestCall;

  constructor(call: ActionHarvestCall) {
    this._call = call;
  }
}

export class ActionHarvestAndRestakeCall extends ethereum.Call {
  get inputs(): ActionHarvestAndRestakeCall__Inputs {
    return new ActionHarvestAndRestakeCall__Inputs(this);
  }

  get outputs(): ActionHarvestAndRestakeCall__Outputs {
    return new ActionHarvestAndRestakeCall__Outputs(this);
  }
}

export class ActionHarvestAndRestakeCall__Inputs {
  _call: ActionHarvestAndRestakeCall;

  constructor(call: ActionHarvestAndRestakeCall) {
    this._call = call;
  }

  get plotId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newStakedElement(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ActionHarvestAndRestakeCall__Outputs {
  _call: ActionHarvestAndRestakeCall;

  constructor(call: ActionHarvestAndRestakeCall) {
    this._call = call;
  }
}

export class ActionPullAndPlaceGuardCall extends ethereum.Call {
  get inputs(): ActionPullAndPlaceGuardCall__Inputs {
    return new ActionPullAndPlaceGuardCall__Inputs(this);
  }

  get outputs(): ActionPullAndPlaceGuardCall__Outputs {
    return new ActionPullAndPlaceGuardCall__Outputs(this);
  }
}

export class ActionPullAndPlaceGuardCall__Inputs {
  _call: ActionPullAndPlaceGuardCall;

  constructor(call: ActionPullAndPlaceGuardCall) {
    this._call = call;
  }

  get plotId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get onGuardTokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get onGuardTokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ActionPullAndPlaceGuardCall__Outputs {
  _call: ActionPullAndPlaceGuardCall;

  constructor(call: ActionPullAndPlaceGuardCall) {
    this._call = call;
  }
}

export class ActionRecallGuardCall extends ethereum.Call {
  get inputs(): ActionRecallGuardCall__Inputs {
    return new ActionRecallGuardCall__Inputs(this);
  }

  get outputs(): ActionRecallGuardCall__Outputs {
    return new ActionRecallGuardCall__Outputs(this);
  }
}

export class ActionRecallGuardCall__Inputs {
  _call: ActionRecallGuardCall;

  constructor(call: ActionRecallGuardCall) {
    this._call = call;
  }

  get onGuardTokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get onGuardTokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ActionRecallGuardCall__Outputs {
  _call: ActionRecallGuardCall;

  constructor(call: ActionRecallGuardCall) {
    this._call = call;
  }
}

export class ActionStakeCall extends ethereum.Call {
  get inputs(): ActionStakeCall__Inputs {
    return new ActionStakeCall__Inputs(this);
  }

  get outputs(): ActionStakeCall__Outputs {
    return new ActionStakeCall__Outputs(this);
  }
}

export class ActionStakeCall__Inputs {
  _call: ActionStakeCall;

  constructor(call: ActionStakeCall) {
    this._call = call;
  }

  get plotId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get stakedElementId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ActionStakeCall__Outputs {
  _call: ActionStakeCall;

  constructor(call: ActionStakeCall) {
    this._call = call;
  }
}

export class ActionStakeAndPutOnGuardCall extends ethereum.Call {
  get inputs(): ActionStakeAndPutOnGuardCall__Inputs {
    return new ActionStakeAndPutOnGuardCall__Inputs(this);
  }

  get outputs(): ActionStakeAndPutOnGuardCall__Outputs {
    return new ActionStakeAndPutOnGuardCall__Outputs(this);
  }
}

export class ActionStakeAndPutOnGuardCall__Inputs {
  _call: ActionStakeAndPutOnGuardCall;

  constructor(call: ActionStakeAndPutOnGuardCall) {
    this._call = call;
  }

  get plotId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get stakedElementId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get guardContractAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get guardTokenId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ActionStakeAndPutOnGuardCall__Outputs {
  _call: ActionStakeAndPutOnGuardCall;

  constructor(call: ActionStakeAndPutOnGuardCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get addressStoreAddress_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintSpecificCall extends ethereum.Call {
  get inputs(): MintSpecificCall__Inputs {
    return new MintSpecificCall__Inputs(this);
  }

  get outputs(): MintSpecificCall__Outputs {
    return new MintSpecificCall__Outputs(this);
  }
}

export class MintSpecificCall__Inputs {
  _call: MintSpecificCall;

  constructor(call: MintSpecificCall) {
    this._call = call;
  }

  get to_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get season_(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get plotTypeName_(): string {
    return this._call.inputValues[2].value.toString();
  }

  get width_(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get height_(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get tileArea_(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get baseGrowthSpeed_(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get baseYield_(): i32 {
    return this._call.inputValues[7].value.toI32();
  }
}

export class MintSpecificCall__Outputs {
  _call: MintSpecificCall;

  constructor(call: MintSpecificCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get newBaseTokenURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class TransferAddressStoreCall extends ethereum.Call {
  get inputs(): TransferAddressStoreCall__Inputs {
    return new TransferAddressStoreCall__Inputs(this);
  }

  get outputs(): TransferAddressStoreCall__Outputs {
    return new TransferAddressStoreCall__Outputs(this);
  }
}

export class TransferAddressStoreCall__Inputs {
  _call: TransferAddressStoreCall;

  constructor(call: TransferAddressStoreCall) {
    this._call = call;
  }

  get newAddressStore(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferAddressStoreCall__Outputs {
  _call: TransferAddressStoreCall;

  constructor(call: TransferAddressStoreCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

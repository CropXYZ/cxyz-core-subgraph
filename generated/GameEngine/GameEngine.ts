// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ActivatedPlotType extends ethereum.Event {
  get params(): ActivatedPlotType__Params {
    return new ActivatedPlotType__Params(this);
  }
}

export class ActivatedPlotType__Params {
  _event: ActivatedPlotType;

  constructor(event: ActivatedPlotType) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get plotTypeId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get plotType(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class ActivatedTimeBreakdown extends ethereum.Event {
  get params(): ActivatedTimeBreakdown__Params {
    return new ActivatedTimeBreakdown__Params(this);
  }
}

export class ActivatedTimeBreakdown__Params {
  _event: ActivatedTimeBreakdown;

  constructor(event: ActivatedTimeBreakdown) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get timeBreakdownId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get stakedElementNameHash(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get stakedElementName(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class ActivatedYieldConfig extends ethereum.Event {
  get params(): ActivatedYieldConfig__Params {
    return new ActivatedYieldConfig__Params(this);
  }
}

export class ActivatedYieldConfig__Params {
  _event: ActivatedYieldConfig;

  constructor(event: ActivatedYieldConfig) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get yieldTableId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get season(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get plotWidth(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get plotHeight(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get tileArea(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get baseYield(): i32 {
    return this._event.parameters[6].value.toI32();
  }

  get plotType(): string {
    return this._event.parameters[7].value.toString();
  }

  get plotTypeId(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class AddedTimeBreakdown extends ethereum.Event {
  get params(): AddedTimeBreakdown__Params {
    return new AddedTimeBreakdown__Params(this);
  }
}

export class AddedTimeBreakdown__Params {
  _event: AddedTimeBreakdown;

  constructor(event: AddedTimeBreakdown) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get stakedElementNameHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get stakedElementName(): string {
    return this._event.parameters[2].value.toString();
  }

  get timeBreakdownId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get isActive(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }

  get nothingToStart(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get startToEarly(): i32 {
    return this._event.parameters[6].value.toI32();
  }

  get earlyToMature(): i32 {
    return this._event.parameters[7].value.toI32();
  }

  get matureToExpire(): i32 {
    return this._event.parameters[8].value.toI32();
  }

  get addressStoreNameHash(): Bytes {
    return this._event.parameters[9].value.toBytes();
  }

  get tokenPlotTypeId(): BigInt {
    return this._event.parameters[10].value.toBigInt();
  }
}

export class AddedYieldConfig extends ethereum.Event {
  get params(): AddedYieldConfig__Params {
    return new AddedYieldConfig__Params(this);
  }
}

export class AddedYieldConfig__Params {
  _event: AddedYieldConfig;

  constructor(event: AddedYieldConfig) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get yieldTableId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get season(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get plotWidth(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get plotHeight(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get tileArea(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get baseYield(): i32 {
    return this._event.parameters[6].value.toI32();
  }

  get plotType(): string {
    return this._event.parameters[7].value.toString();
  }

  get plotTypeId(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get minYield(): i32 {
    return this._event.parameters[9].value.toI32();
  }

  get maxYield(): i32 {
    return this._event.parameters[10].value.toI32();
  }

  get isActive(): boolean {
    return this._event.parameters[11].value.toBoolean();
  }
}

export class AddressStoreChanged extends ethereum.Event {
  get params(): AddressStoreChanged__Params {
    return new AddressStoreChanged__Params(this);
  }
}

export class AddressStoreChanged__Params {
  _event: AddressStoreChanged;

  constructor(event: AddressStoreChanged) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldAddressStore(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newAddressStore(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DeactivatedTimeBreakdown extends ethereum.Event {
  get params(): DeactivatedTimeBreakdown__Params {
    return new DeactivatedTimeBreakdown__Params(this);
  }
}

export class DeactivatedTimeBreakdown__Params {
  _event: DeactivatedTimeBreakdown;

  constructor(event: DeactivatedTimeBreakdown) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get timeBreakdownId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get stakedElementNameHash(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get stakedElementName(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class DeactivatedYieldConfig extends ethereum.Event {
  get params(): DeactivatedYieldConfig__Params {
    return new DeactivatedYieldConfig__Params(this);
  }
}

export class DeactivatedYieldConfig__Params {
  _event: DeactivatedYieldConfig;

  constructor(event: DeactivatedYieldConfig) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get yieldTableId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get season(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get plotWidth(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get plotHeight(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get tileArea(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get baseYield(): i32 {
    return this._event.parameters[6].value.toI32();
  }

  get plotType(): string {
    return this._event.parameters[7].value.toString();
  }

  get plotTypeId(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PausedGame extends ethereum.Event {
  get params(): PausedGame__Params {
    return new PausedGame__Params(this);
  }
}

export class PausedGame__Params {
  _event: PausedGame;

  constructor(event: PausedGame) {
    this._event = event;
  }

  get pauser(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SetOfTokenOutGoldInSwapped extends ethereum.Event {
  get params(): SetOfTokenOutGoldInSwapped__Params {
    return new SetOfTokenOutGoldInSwapped__Params(this);
  }
}

export class SetOfTokenOutGoldInSwapped__Params {
  _event: SetOfTokenOutGoldInSwapped;

  constructor(event: SetOfTokenOutGoldInSwapped) {
    this._event = event;
  }

  get swapper(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get swappingTokenAddresses(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }

  get inputtedTokenOuts(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get inputtedGoldMaxes(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }

  get calculatedTokenOuts(): Array<BigInt> {
    return this._event.parameters[5].value.toBigIntArray();
  }

  get calculatedGoldIns(): Array<BigInt> {
    return this._event.parameters[6].value.toBigIntArray();
  }

  get calculatedTotalGoldIn(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class TokenInGoldOutSwapped extends ethereum.Event {
  get params(): TokenInGoldOutSwapped__Params {
    return new TokenInGoldOutSwapped__Params(this);
  }
}

export class TokenInGoldOutSwapped__Params {
  _event: TokenInGoldOutSwapped;

  constructor(event: TokenInGoldOutSwapped) {
    this._event = event;
  }

  get swapper(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get swappingTokenAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get inputtedTokenIn(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get inputtedGoldMin(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get calculatedTokenIn(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get calculatedGoldOut(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class TokenOutGoldInSwapped extends ethereum.Event {
  get params(): TokenOutGoldInSwapped__Params {
    return new TokenOutGoldInSwapped__Params(this);
  }
}

export class TokenOutGoldInSwapped__Params {
  _event: TokenOutGoldInSwapped;

  constructor(event: TokenOutGoldInSwapped) {
    this._event = event;
  }

  get swapper(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get swappingTokenAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get inputtedTokenOut(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get inputtedGoldMax(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get calculatedTokenOut(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get calculatedGoldIn(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UnpausedGame extends ethereum.Event {
  get params(): UnpausedGame__Params {
    return new UnpausedGame__Params(this);
  }
}

export class UnpausedGame__Params {
  _event: UnpausedGame;

  constructor(event: UnpausedGame) {
    this._event = event;
  }

  get pauser(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpdatedGuardAddressLog extends ethereum.Event {
  get params(): UpdatedGuardAddressLog__Params {
    return new UpdatedGuardAddressLog__Params(this);
  }
}

export class UpdatedGuardAddressLog__Params {
  _event: UpdatedGuardAddressLog;

  constructor(event: UpdatedGuardAddressLog) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get guardAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newSetting(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get previousSetting(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class UpdatedTimeBreakdown extends ethereum.Event {
  get params(): UpdatedTimeBreakdown__Params {
    return new UpdatedTimeBreakdown__Params(this);
  }
}

export class UpdatedTimeBreakdown__Params {
  _event: UpdatedTimeBreakdown;

  constructor(event: UpdatedTimeBreakdown) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get stakedElementNameHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get stakedElementName(): string {
    return this._event.parameters[2].value.toString();
  }

  get timeBreakdownId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get newNothingToStart(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get newStartToEarly(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get newEarlyToMature(): i32 {
    return this._event.parameters[6].value.toI32();
  }

  get newMatureToExpire(): i32 {
    return this._event.parameters[7].value.toI32();
  }

  get previousNothingToStart(): i32 {
    return this._event.parameters[8].value.toI32();
  }

  get previousStartToEarly(): i32 {
    return this._event.parameters[9].value.toI32();
  }

  get previousEarlyToMature(): i32 {
    return this._event.parameters[10].value.toI32();
  }

  get previousMatureToExpire(): i32 {
    return this._event.parameters[11].value.toI32();
  }
}

export class UpdatedTimeBreakdownAddress extends ethereum.Event {
  get params(): UpdatedTimeBreakdownAddress__Params {
    return new UpdatedTimeBreakdownAddress__Params(this);
  }
}

export class UpdatedTimeBreakdownAddress__Params {
  _event: UpdatedTimeBreakdownAddress;

  constructor(event: UpdatedTimeBreakdownAddress) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get stakedElementNameHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get stakedElementName(): string {
    return this._event.parameters[2].value.toString();
  }

  get timeBreakdownId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get newAddressStoreNameHash(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get previousAddressStoreNameHash(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class UpdatedYieldConfig extends ethereum.Event {
  get params(): UpdatedYieldConfig__Params {
    return new UpdatedYieldConfig__Params(this);
  }
}

export class UpdatedYieldConfig__Params {
  _event: UpdatedYieldConfig;

  constructor(event: UpdatedYieldConfig) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get yieldTableId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get season(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get plotWidth(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get plotHeight(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get tileArea(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get baseYield(): i32 {
    return this._event.parameters[6].value.toI32();
  }

  get plotType(): string {
    return this._event.parameters[7].value.toString();
  }

  get plotTypeId(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get minYield(): i32 {
    return this._event.parameters[9].value.toI32();
  }

  get maxYield(): i32 {
    return this._event.parameters[10].value.toI32();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class GameEngine__stakedElementTimeBreakdownSetResult {
  value0: i32;
  value1: i32;
  value2: i32;
  value3: i32;

  constructor(value0: i32, value1: i32, value2: i32, value3: i32) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    return map;
  }
}

export class GameEngine__versionResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class GameEngine__versionGameUtilResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class GameEngine__versionGuardResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class GameEngine__versionPlotTypeResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class GameEngine__versionSystemPointersResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class GameEngine__versionTimeBreakdownResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class GameEngine__versionTokenOperationResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class GameEngine__versionYieldTableResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class GameEngine__yieldRangeWithPlotTypeIdResult {
  value0: i32;
  value1: i32;

  constructor(value0: i32, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    return map;
  }
}

export class GameEngine__yieldRangeWithPlotTypeNameResult {
  value0: i32;
  value1: i32;

  constructor(value0: i32, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    return map;
  }
}

export class GameEngine extends ethereum.SmartContract {
  static bind(address: Address): GameEngine {
    return new GameEngine("GameEngine", address);
  }

  AS_ENGINE_ADDRESS(): Bytes {
    let result = super.call(
      "AS_ENGINE_ADDRESS",
      "AS_ENGINE_ADDRESS():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_AS_ENGINE_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_ENGINE_ADDRESS",
      "AS_ENGINE_ADDRESS():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_GOLD_ADDRESS(): Bytes {
    let result = super.call(
      "AS_GOLD_ADDRESS",
      "AS_GOLD_ADDRESS():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_AS_GOLD_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_GOLD_ADDRESS",
      "AS_GOLD_ADDRESS():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_POOL_ADDRESS(): Bytes {
    let result = super.call(
      "AS_POOL_ADDRESS",
      "AS_POOL_ADDRESS():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_AS_POOL_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_POOL_ADDRESS",
      "AS_POOL_ADDRESS():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_ROLE_REGISTRY_ADDRESS(): Bytes {
    let result = super.call(
      "AS_ROLE_REGISTRY_ADDRESS",
      "AS_ROLE_REGISTRY_ADDRESS():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_AS_ROLE_REGISTRY_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_ROLE_REGISTRY_ADDRESS",
      "AS_ROLE_REGISTRY_ADDRESS():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_TEAM_ADDRESS(): Bytes {
    let result = super.call(
      "AS_TEAM_ADDRESS",
      "AS_TEAM_ADDRESS():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_AS_TEAM_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_TEAM_ADDRESS",
      "AS_TEAM_ADDRESS():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_TREASURY_ADDRESS(): Bytes {
    let result = super.call(
      "AS_TREASURY_ADDRESS",
      "AS_TREASURY_ADDRESS():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_AS_TREASURY_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_TREASURY_ADDRESS",
      "AS_TREASURY_ADDRESS():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_ADDRESS_CONTROLLER_ROLE(): Bytes {
    let result = super.call(
      "RR_ADDRESS_CONTROLLER_ROLE",
      "RR_ADDRESS_CONTROLLER_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_RR_ADDRESS_CONTROLLER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "RR_ADDRESS_CONTROLLER_ROLE",
      "RR_ADDRESS_CONTROLLER_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_GAME_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "RR_GAME_ADMIN_ROLE",
      "RR_GAME_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_RR_GAME_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "RR_GAME_ADMIN_ROLE",
      "RR_GAME_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_GAME_ROLE(): Bytes {
    let result = super.call("RR_GAME_ROLE", "RR_GAME_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_RR_GAME_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("RR_GAME_ROLE", "RR_GAME_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_OPERATOR_ROLE(): Bytes {
    let result = super.call(
      "RR_OPERATOR_ROLE",
      "RR_OPERATOR_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_RR_OPERATOR_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "RR_OPERATOR_ROLE",
      "RR_OPERATOR_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_PAUSER_ROLE(): Bytes {
    let result = super.call("RR_PAUSER_ROLE", "RR_PAUSER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_RR_PAUSER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "RR_PAUSER_ROLE",
      "RR_PAUSER_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_POOL_ROLE(): Bytes {
    let result = super.call("RR_POOL_ROLE", "RR_POOL_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_RR_POOL_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("RR_POOL_ROLE", "RR_POOL_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_TEAM_ROLE(): Bytes {
    let result = super.call("RR_TEAM_ROLE", "RR_TEAM_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_RR_TEAM_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("RR_TEAM_ROLE", "RR_TEAM_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_TREASURY_ROLE(): Bytes {
    let result = super.call(
      "RR_TREASURY_ROLE",
      "RR_TREASURY_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_RR_TREASURY_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "RR_TREASURY_ROLE",
      "RR_TREASURY_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_UPGRADER_ROLE(): Bytes {
    let result = super.call(
      "RR_UPGRADER_ROLE",
      "RR_UPGRADER_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_RR_UPGRADER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "RR_UPGRADER_ROLE",
      "RR_UPGRADER_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  addressStore(): Address {
    let result = super.call("addressStore", "addressStore():(address)", []);

    return result[0].toAddress();
  }

  try_addressStore(): ethereum.CallResult<Address> {
    let result = super.tryCall("addressStore", "addressStore():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  goldAddress(): Address {
    let result = super.call("goldAddress", "goldAddress():(address)", []);

    return result[0].toAddress();
  }

  try_goldAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("goldAddress", "goldAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  guardAddressBoost(guardAddress: Address): i32 {
    let result = super.call(
      "guardAddressBoost",
      "guardAddressBoost(address):(uint8)",
      [ethereum.Value.fromAddress(guardAddress)]
    );

    return result[0].toI32();
  }

  try_guardAddressBoost(guardAddress: Address): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "guardAddressBoost",
      "guardAddressBoost(address):(uint8)",
      [ethereum.Value.fromAddress(guardAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  harvestableYield(
    season: i32,
    plotWidth: i32,
    plotHeight: i32,
    tileArea: i32,
    baseYield: i32,
    plotTypeIdEntered: BigInt,
    tokenElementId: BigInt,
    guardAddress: Address
  ): i32 {
    let result = super.call(
      "harvestableYield",
      "harvestableYield(uint8,uint8,uint8,uint8,uint8,uint256,uint256,address):(uint16)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(season)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotWidth)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotHeight)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tileArea)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(baseYield)),
        ethereum.Value.fromUnsignedBigInt(plotTypeIdEntered),
        ethereum.Value.fromUnsignedBigInt(tokenElementId),
        ethereum.Value.fromAddress(guardAddress)
      ]
    );

    return result[0].toI32();
  }

  try_harvestableYield(
    season: i32,
    plotWidth: i32,
    plotHeight: i32,
    tileArea: i32,
    baseYield: i32,
    plotTypeIdEntered: BigInt,
    tokenElementId: BigInt,
    guardAddress: Address
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "harvestableYield",
      "harvestableYield(uint8,uint8,uint8,uint8,uint8,uint256,uint256,address):(uint16)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(season)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotWidth)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotHeight)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tileArea)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(baseYield)),
        ethereum.Value.fromUnsignedBigInt(plotTypeIdEntered),
        ethereum.Value.fromUnsignedBigInt(tokenElementId),
        ethereum.Value.fromAddress(guardAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  isActiveStakedElement(stakedElementId: BigInt): boolean {
    let result = super.call(
      "isActiveStakedElement",
      "isActiveStakedElement(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(stakedElementId)]
    );

    return result[0].toBoolean();
  }

  try_isActiveStakedElement(
    stakedElementId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isActiveStakedElement",
      "isActiveStakedElement(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(stakedElementId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isValidAndActiveStakedElement(stakedElementId: BigInt): boolean {
    let result = super.call(
      "isValidAndActiveStakedElement",
      "isValidAndActiveStakedElement(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(stakedElementId)]
    );

    return result[0].toBoolean();
  }

  try_isValidAndActiveStakedElement(
    stakedElementId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isValidAndActiveStakedElement",
      "isValidAndActiveStakedElement(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(stakedElementId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isValidPlotTypeId(plotTypeIdEntered: BigInt): boolean {
    let result = super.call(
      "isValidPlotTypeId",
      "isValidPlotTypeId(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(plotTypeIdEntered)]
    );

    return result[0].toBoolean();
  }

  try_isValidPlotTypeId(
    plotTypeIdEntered: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isValidPlotTypeId",
      "isValidPlotTypeId(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(plotTypeIdEntered)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isValidPlotTypeName(plotTypeNameEntered: string): boolean {
    let result = super.call(
      "isValidPlotTypeName",
      "isValidPlotTypeName(string):(bool)",
      [ethereum.Value.fromString(plotTypeNameEntered)]
    );

    return result[0].toBoolean();
  }

  try_isValidPlotTypeName(
    plotTypeNameEntered: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isValidPlotTypeName",
      "isValidPlotTypeName(string):(bool)",
      [ethereum.Value.fromString(plotTypeNameEntered)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isValidStakedElement(stakedElementId: BigInt): boolean {
    let result = super.call(
      "isValidStakedElement",
      "isValidStakedElement(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(stakedElementId)]
    );

    return result[0].toBoolean();
  }

  try_isValidStakedElement(
    stakedElementId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isValidStakedElement",
      "isValidStakedElement(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(stakedElementId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isYieldRangeActiveWithPlotId(
    season: i32,
    plotWidth: i32,
    plotHeight: i32,
    tileArea: i32,
    baseYield: i32,
    plotTypeIdEntered: BigInt
  ): boolean {
    let result = super.call(
      "isYieldRangeActiveWithPlotId",
      "isYieldRangeActiveWithPlotId(uint8,uint8,uint8,uint8,uint8,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(season)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotWidth)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotHeight)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tileArea)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(baseYield)),
        ethereum.Value.fromUnsignedBigInt(plotTypeIdEntered)
      ]
    );

    return result[0].toBoolean();
  }

  try_isYieldRangeActiveWithPlotId(
    season: i32,
    plotWidth: i32,
    plotHeight: i32,
    tileArea: i32,
    baseYield: i32,
    plotTypeIdEntered: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isYieldRangeActiveWithPlotId",
      "isYieldRangeActiveWithPlotId(uint8,uint8,uint8,uint8,uint8,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(season)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotWidth)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotHeight)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tileArea)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(baseYield)),
        ethereum.Value.fromUnsignedBigInt(plotTypeIdEntered)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isYieldRangeActiveWithPlotName(
    season: i32,
    plotWidth: i32,
    plotHeight: i32,
    tileArea: i32,
    baseYield: i32,
    plotType: string
  ): boolean {
    let result = super.call(
      "isYieldRangeActiveWithPlotName",
      "isYieldRangeActiveWithPlotName(uint8,uint8,uint8,uint8,uint8,string):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(season)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotWidth)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotHeight)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tileArea)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(baseYield)),
        ethereum.Value.fromString(plotType)
      ]
    );

    return result[0].toBoolean();
  }

  try_isYieldRangeActiveWithPlotName(
    season: i32,
    plotWidth: i32,
    plotHeight: i32,
    tileArea: i32,
    baseYield: i32,
    plotType: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isYieldRangeActiveWithPlotName",
      "isYieldRangeActiveWithPlotName(uint8,uint8,uint8,uint8,uint8,string):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(season)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotWidth)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotHeight)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tileArea)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(baseYield)),
        ethereum.Value.fromString(plotType)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pausedGame(): boolean {
    let result = super.call("pausedGame", "pausedGame():(bool)", []);

    return result[0].toBoolean();
  }

  try_pausedGame(): ethereum.CallResult<boolean> {
    let result = super.tryCall("pausedGame", "pausedGame():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  plotTypeId(plotTypeNameEntered: string): BigInt {
    let result = super.call("plotTypeId", "plotTypeId(string):(uint256)", [
      ethereum.Value.fromString(plotTypeNameEntered)
    ]);

    return result[0].toBigInt();
  }

  try_plotTypeId(plotTypeNameEntered: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall("plotTypeId", "plotTypeId(string):(uint256)", [
      ethereum.Value.fromString(plotTypeNameEntered)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  plotTypeName(plotTypeIdEntered: BigInt): string {
    let result = super.call("plotTypeName", "plotTypeName(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(plotTypeIdEntered)
    ]);

    return result[0].toString();
  }

  try_plotTypeName(plotTypeIdEntered: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "plotTypeName",
      "plotTypeName(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(plotTypeIdEntered)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  plotTypeNames(): Array<string> {
    let result = super.call("plotTypeNames", "plotTypeNames():(string[])", []);

    return result[0].toStringArray();
  }

  try_plotTypeNames(): ethereum.CallResult<Array<string>> {
    let result = super.tryCall(
      "plotTypeNames",
      "plotTypeNames():(string[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toStringArray());
  }

  poolAddress(): Address {
    let result = super.call("poolAddress", "poolAddress():(address)", []);

    return result[0].toAddress();
  }

  try_poolAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("poolAddress", "poolAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  roleRegistry(): Address {
    let result = super.call("roleRegistry", "roleRegistry():(address)", []);

    return result[0].toAddress();
  }

  try_roleRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall("roleRegistry", "roleRegistry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakedElementNameToId(stakedElementName: string): BigInt {
    let result = super.call(
      "stakedElementNameToId",
      "stakedElementNameToId(string):(uint256)",
      [ethereum.Value.fromString(stakedElementName)]
    );

    return result[0].toBigInt();
  }

  try_stakedElementNameToId(
    stakedElementName: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakedElementNameToId",
      "stakedElementNameToId(string):(uint256)",
      [ethereum.Value.fromString(stakedElementName)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakedElementTimeBreakdownExists(stakedElementName: string): boolean {
    let result = super.call(
      "stakedElementTimeBreakdownExists",
      "stakedElementTimeBreakdownExists(string):(bool)",
      [ethereum.Value.fromString(stakedElementName)]
    );

    return result[0].toBoolean();
  }

  try_stakedElementTimeBreakdownExists(
    stakedElementName: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "stakedElementTimeBreakdownExists",
      "stakedElementTimeBreakdownExists(string):(bool)",
      [ethereum.Value.fromString(stakedElementName)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  stakedElementTimeBreakdownSet(
    stakedElementId: BigInt
  ): GameEngine__stakedElementTimeBreakdownSetResult {
    let result = super.call(
      "stakedElementTimeBreakdownSet",
      "stakedElementTimeBreakdownSet(uint256):(uint24,uint24,uint24,uint24)",
      [ethereum.Value.fromUnsignedBigInt(stakedElementId)]
    );

    return new GameEngine__stakedElementTimeBreakdownSetResult(
      result[0].toI32(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toI32()
    );
  }

  try_stakedElementTimeBreakdownSet(
    stakedElementId: BigInt
  ): ethereum.CallResult<GameEngine__stakedElementTimeBreakdownSetResult> {
    let result = super.tryCall(
      "stakedElementTimeBreakdownSet",
      "stakedElementTimeBreakdownSet(uint256):(uint24,uint24,uint24,uint24)",
      [ethereum.Value.fromUnsignedBigInt(stakedElementId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GameEngine__stakedElementTimeBreakdownSetResult(
        value[0].toI32(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toI32()
      )
    );
  }

  stakedElementTimeEarlyToMature(stakedElementId: BigInt): i32 {
    let result = super.call(
      "stakedElementTimeEarlyToMature",
      "stakedElementTimeEarlyToMature(uint256):(uint24)",
      [ethereum.Value.fromUnsignedBigInt(stakedElementId)]
    );

    return result[0].toI32();
  }

  try_stakedElementTimeEarlyToMature(
    stakedElementId: BigInt
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "stakedElementTimeEarlyToMature",
      "stakedElementTimeEarlyToMature(uint256):(uint24)",
      [ethereum.Value.fromUnsignedBigInt(stakedElementId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  stakedElementTimeMatureToExpire(stakedElementId: BigInt): i32 {
    let result = super.call(
      "stakedElementTimeMatureToExpire",
      "stakedElementTimeMatureToExpire(uint256):(uint24)",
      [ethereum.Value.fromUnsignedBigInt(stakedElementId)]
    );

    return result[0].toI32();
  }

  try_stakedElementTimeMatureToExpire(
    stakedElementId: BigInt
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "stakedElementTimeMatureToExpire",
      "stakedElementTimeMatureToExpire(uint256):(uint24)",
      [ethereum.Value.fromUnsignedBigInt(stakedElementId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  stakedElementTimeMaturity(stakedElementId: BigInt): BigInt {
    let result = super.call(
      "stakedElementTimeMaturity",
      "stakedElementTimeMaturity(uint256):(uint64)",
      [ethereum.Value.fromUnsignedBigInt(stakedElementId)]
    );

    return result[0].toBigInt();
  }

  try_stakedElementTimeMaturity(
    stakedElementId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakedElementTimeMaturity",
      "stakedElementTimeMaturity(uint256):(uint64)",
      [ethereum.Value.fromUnsignedBigInt(stakedElementId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakedElementTimeNothingToStart(stakedElementId: BigInt): i32 {
    let result = super.call(
      "stakedElementTimeNothingToStart",
      "stakedElementTimeNothingToStart(uint256):(uint24)",
      [ethereum.Value.fromUnsignedBigInt(stakedElementId)]
    );

    return result[0].toI32();
  }

  try_stakedElementTimeNothingToStart(
    stakedElementId: BigInt
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "stakedElementTimeNothingToStart",
      "stakedElementTimeNothingToStart(uint256):(uint24)",
      [ethereum.Value.fromUnsignedBigInt(stakedElementId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  stakedElementTimeStartToEarly(stakedElementId: BigInt): i32 {
    let result = super.call(
      "stakedElementTimeStartToEarly",
      "stakedElementTimeStartToEarly(uint256):(uint24)",
      [ethereum.Value.fromUnsignedBigInt(stakedElementId)]
    );

    return result[0].toI32();
  }

  try_stakedElementTimeStartToEarly(
    stakedElementId: BigInt
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "stakedElementTimeStartToEarly",
      "stakedElementTimeStartToEarly(uint256):(uint24)",
      [ethereum.Value.fromUnsignedBigInt(stakedElementId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  stakedElementTimeTotal(stakedElementId: BigInt): BigInt {
    let result = super.call(
      "stakedElementTimeTotal",
      "stakedElementTimeTotal(uint256):(uint64)",
      [ethereum.Value.fromUnsignedBigInt(stakedElementId)]
    );

    return result[0].toBigInt();
  }

  try_stakedElementTimeTotal(
    stakedElementId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakedElementTimeTotal",
      "stakedElementTimeTotal(uint256):(uint64)",
      [ethereum.Value.fromUnsignedBigInt(stakedElementId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakedElementTokenAddress(stakedElementId: BigInt): Address {
    let result = super.call(
      "stakedElementTokenAddress",
      "stakedElementTokenAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(stakedElementId)]
    );

    return result[0].toAddress();
  }

  try_stakedElementTokenAddress(
    stakedElementId: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stakedElementTokenAddress",
      "stakedElementTokenAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(stakedElementId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakedElementsNames(): Array<string> {
    let result = super.call(
      "stakedElementsNames",
      "stakedElementsNames():(string[])",
      []
    );

    return result[0].toStringArray();
  }

  try_stakedElementsNames(): ethereum.CallResult<Array<string>> {
    let result = super.tryCall(
      "stakedElementsNames",
      "stakedElementsNames():(string[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toStringArray());
  }

  totalPlotTypes(): BigInt {
    let result = super.call("totalPlotTypes", "totalPlotTypes():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalPlotTypes(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalPlotTypes",
      "totalPlotTypes():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStakedElementTimeBreakdowns(): BigInt {
    let result = super.call(
      "totalStakedElementTimeBreakdowns",
      "totalStakedElementTimeBreakdowns():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalStakedElementTimeBreakdowns(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalStakedElementTimeBreakdowns",
      "totalStakedElementTimeBreakdowns():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treasuryAddress(): Address {
    let result = super.call(
      "treasuryAddress",
      "treasuryAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_treasuryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "treasuryAddress",
      "treasuryAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  version(): GameEngine__versionResult {
    let result = super.call(
      "version",
      "version():(uint256,uint256,uint256)",
      []
    );

    return new GameEngine__versionResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_version(): ethereum.CallResult<GameEngine__versionResult> {
    let result = super.tryCall(
      "version",
      "version():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GameEngine__versionResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  versionGameUtil(): GameEngine__versionGameUtilResult {
    let result = super.call(
      "versionGameUtil",
      "versionGameUtil():(uint256,uint256,uint256)",
      []
    );

    return new GameEngine__versionGameUtilResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_versionGameUtil(): ethereum.CallResult<
    GameEngine__versionGameUtilResult
  > {
    let result = super.tryCall(
      "versionGameUtil",
      "versionGameUtil():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GameEngine__versionGameUtilResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  versionGuard(): GameEngine__versionGuardResult {
    let result = super.call(
      "versionGuard",
      "versionGuard():(uint256,uint256,uint256)",
      []
    );

    return new GameEngine__versionGuardResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_versionGuard(): ethereum.CallResult<GameEngine__versionGuardResult> {
    let result = super.tryCall(
      "versionGuard",
      "versionGuard():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GameEngine__versionGuardResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  versionPlotType(): GameEngine__versionPlotTypeResult {
    let result = super.call(
      "versionPlotType",
      "versionPlotType():(uint256,uint256,uint256)",
      []
    );

    return new GameEngine__versionPlotTypeResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_versionPlotType(): ethereum.CallResult<
    GameEngine__versionPlotTypeResult
  > {
    let result = super.tryCall(
      "versionPlotType",
      "versionPlotType():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GameEngine__versionPlotTypeResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  versionSystemPointers(): GameEngine__versionSystemPointersResult {
    let result = super.call(
      "versionSystemPointers",
      "versionSystemPointers():(uint256,uint256,uint256)",
      []
    );

    return new GameEngine__versionSystemPointersResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_versionSystemPointers(): ethereum.CallResult<
    GameEngine__versionSystemPointersResult
  > {
    let result = super.tryCall(
      "versionSystemPointers",
      "versionSystemPointers():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GameEngine__versionSystemPointersResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  versionTimeBreakdown(): GameEngine__versionTimeBreakdownResult {
    let result = super.call(
      "versionTimeBreakdown",
      "versionTimeBreakdown():(uint256,uint256,uint256)",
      []
    );

    return new GameEngine__versionTimeBreakdownResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_versionTimeBreakdown(): ethereum.CallResult<
    GameEngine__versionTimeBreakdownResult
  > {
    let result = super.tryCall(
      "versionTimeBreakdown",
      "versionTimeBreakdown():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GameEngine__versionTimeBreakdownResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  versionTokenOperation(): GameEngine__versionTokenOperationResult {
    let result = super.call(
      "versionTokenOperation",
      "versionTokenOperation():(uint256,uint256,uint256)",
      []
    );

    return new GameEngine__versionTokenOperationResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_versionTokenOperation(): ethereum.CallResult<
    GameEngine__versionTokenOperationResult
  > {
    let result = super.tryCall(
      "versionTokenOperation",
      "versionTokenOperation():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GameEngine__versionTokenOperationResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  versionYieldTable(): GameEngine__versionYieldTableResult {
    let result = super.call(
      "versionYieldTable",
      "versionYieldTable():(uint256,uint256,uint256)",
      []
    );

    return new GameEngine__versionYieldTableResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_versionYieldTable(): ethereum.CallResult<
    GameEngine__versionYieldTableResult
  > {
    let result = super.tryCall(
      "versionYieldTable",
      "versionYieldTable():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GameEngine__versionYieldTableResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  yieldRangeWithPlotTypeId(
    season: i32,
    plotWidth: i32,
    plotHeight: i32,
    tileArea: i32,
    baseYield: i32,
    plotTypeIdEntered: BigInt
  ): GameEngine__yieldRangeWithPlotTypeIdResult {
    let result = super.call(
      "yieldRangeWithPlotTypeId",
      "yieldRangeWithPlotTypeId(uint8,uint8,uint8,uint8,uint8,uint256):(uint16,uint16)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(season)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotWidth)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotHeight)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tileArea)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(baseYield)),
        ethereum.Value.fromUnsignedBigInt(plotTypeIdEntered)
      ]
    );

    return new GameEngine__yieldRangeWithPlotTypeIdResult(
      result[0].toI32(),
      result[1].toI32()
    );
  }

  try_yieldRangeWithPlotTypeId(
    season: i32,
    plotWidth: i32,
    plotHeight: i32,
    tileArea: i32,
    baseYield: i32,
    plotTypeIdEntered: BigInt
  ): ethereum.CallResult<GameEngine__yieldRangeWithPlotTypeIdResult> {
    let result = super.tryCall(
      "yieldRangeWithPlotTypeId",
      "yieldRangeWithPlotTypeId(uint8,uint8,uint8,uint8,uint8,uint256):(uint16,uint16)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(season)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotWidth)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotHeight)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tileArea)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(baseYield)),
        ethereum.Value.fromUnsignedBigInt(plotTypeIdEntered)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GameEngine__yieldRangeWithPlotTypeIdResult(
        value[0].toI32(),
        value[1].toI32()
      )
    );
  }

  yieldRangeWithPlotTypeName(
    season: i32,
    plotWidth: i32,
    plotHeight: i32,
    tileArea: i32,
    baseYield: i32,
    plotType: string
  ): GameEngine__yieldRangeWithPlotTypeNameResult {
    let result = super.call(
      "yieldRangeWithPlotTypeName",
      "yieldRangeWithPlotTypeName(uint8,uint8,uint8,uint8,uint8,string):(uint16,uint16)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(season)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotWidth)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotHeight)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tileArea)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(baseYield)),
        ethereum.Value.fromString(plotType)
      ]
    );

    return new GameEngine__yieldRangeWithPlotTypeNameResult(
      result[0].toI32(),
      result[1].toI32()
    );
  }

  try_yieldRangeWithPlotTypeName(
    season: i32,
    plotWidth: i32,
    plotHeight: i32,
    tileArea: i32,
    baseYield: i32,
    plotType: string
  ): ethereum.CallResult<GameEngine__yieldRangeWithPlotTypeNameResult> {
    let result = super.tryCall(
      "yieldRangeWithPlotTypeName",
      "yieldRangeWithPlotTypeName(uint8,uint8,uint8,uint8,uint8,string):(uint16,uint16)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(season)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotWidth)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotHeight)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tileArea)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(baseYield)),
        ethereum.Value.fromString(plotType)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GameEngine__yieldRangeWithPlotTypeNameResult(
        value[0].toI32(),
        value[1].toI32()
      )
    );
  }

  yieldTableId(
    season: i32,
    plotWidth: i32,
    plotHeight: i32,
    tileArea: i32,
    baseYield: i32,
    plotTypeIdEntered: BigInt
  ): BigInt {
    let result = super.call(
      "yieldTableId",
      "yieldTableId(uint8,uint8,uint8,uint8,uint8,uint256):(uint48)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(season)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotWidth)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotHeight)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tileArea)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(baseYield)),
        ethereum.Value.fromUnsignedBigInt(plotTypeIdEntered)
      ]
    );

    return result[0].toBigInt();
  }

  try_yieldTableId(
    season: i32,
    plotWidth: i32,
    plotHeight: i32,
    tileArea: i32,
    baseYield: i32,
    plotTypeIdEntered: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "yieldTableId",
      "yieldTableId(uint8,uint8,uint8,uint8,uint8,uint256):(uint48)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(season)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotWidth)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotHeight)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tileArea)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(baseYield)),
        ethereum.Value.fromUnsignedBigInt(plotTypeIdEntered)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ActivatePlotTypeCall extends ethereum.Call {
  get inputs(): ActivatePlotTypeCall__Inputs {
    return new ActivatePlotTypeCall__Inputs(this);
  }

  get outputs(): ActivatePlotTypeCall__Outputs {
    return new ActivatePlotTypeCall__Outputs(this);
  }
}

export class ActivatePlotTypeCall__Inputs {
  _call: ActivatePlotTypeCall;

  constructor(call: ActivatePlotTypeCall) {
    this._call = call;
  }

  get plotTypeNameEntered(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class ActivatePlotTypeCall__Outputs {
  _call: ActivatePlotTypeCall;

  constructor(call: ActivatePlotTypeCall) {
    this._call = call;
  }
}

export class ActivateTimeBreakdownCall extends ethereum.Call {
  get inputs(): ActivateTimeBreakdownCall__Inputs {
    return new ActivateTimeBreakdownCall__Inputs(this);
  }

  get outputs(): ActivateTimeBreakdownCall__Outputs {
    return new ActivateTimeBreakdownCall__Outputs(this);
  }
}

export class ActivateTimeBreakdownCall__Inputs {
  _call: ActivateTimeBreakdownCall;

  constructor(call: ActivateTimeBreakdownCall) {
    this._call = call;
  }

  get stakedElementName(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class ActivateTimeBreakdownCall__Outputs {
  _call: ActivateTimeBreakdownCall;

  constructor(call: ActivateTimeBreakdownCall) {
    this._call = call;
  }
}

export class ActivateYieldConfigCall extends ethereum.Call {
  get inputs(): ActivateYieldConfigCall__Inputs {
    return new ActivateYieldConfigCall__Inputs(this);
  }

  get outputs(): ActivateYieldConfigCall__Outputs {
    return new ActivateYieldConfigCall__Outputs(this);
  }
}

export class ActivateYieldConfigCall__Inputs {
  _call: ActivateYieldConfigCall;

  constructor(call: ActivateYieldConfigCall) {
    this._call = call;
  }

  get season(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get plotWidth(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get plotHeight(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get tileArea(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get baseYield(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get plotType(): string {
    return this._call.inputValues[5].value.toString();
  }
}

export class ActivateYieldConfigCall__Outputs {
  _call: ActivateYieldConfigCall;

  constructor(call: ActivateYieldConfigCall) {
    this._call = call;
  }
}

export class AddTimeBreakdownCall extends ethereum.Call {
  get inputs(): AddTimeBreakdownCall__Inputs {
    return new AddTimeBreakdownCall__Inputs(this);
  }

  get outputs(): AddTimeBreakdownCall__Outputs {
    return new AddTimeBreakdownCall__Outputs(this);
  }
}

export class AddTimeBreakdownCall__Inputs {
  _call: AddTimeBreakdownCall;

  constructor(call: AddTimeBreakdownCall) {
    this._call = call;
  }

  get stakedElementName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get addressStoreName(): string {
    return this._call.inputValues[1].value.toString();
  }

  get nothingToStart(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get startToEarly(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get earlyToMature(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get matureToExpire(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get isActive(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }
}

export class AddTimeBreakdownCall__Outputs {
  _call: AddTimeBreakdownCall;

  constructor(call: AddTimeBreakdownCall) {
    this._call = call;
  }
}

export class AddYieldConfigCall extends ethereum.Call {
  get inputs(): AddYieldConfigCall__Inputs {
    return new AddYieldConfigCall__Inputs(this);
  }

  get outputs(): AddYieldConfigCall__Outputs {
    return new AddYieldConfigCall__Outputs(this);
  }
}

export class AddYieldConfigCall__Inputs {
  _call: AddYieldConfigCall;

  constructor(call: AddYieldConfigCall) {
    this._call = call;
  }

  get season(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get plotWidth(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get plotHeight(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get tileArea(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get baseYield(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get plotType(): string {
    return this._call.inputValues[5].value.toString();
  }

  get minYield(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get maxYield(): i32 {
    return this._call.inputValues[7].value.toI32();
  }

  get isActive(): boolean {
    return this._call.inputValues[8].value.toBoolean();
  }
}

export class AddYieldConfigCall__Outputs {
  _call: AddYieldConfigCall;

  constructor(call: AddYieldConfigCall) {
    this._call = call;
  }
}

export class BuySetOfTokensCall extends ethereum.Call {
  get inputs(): BuySetOfTokensCall__Inputs {
    return new BuySetOfTokensCall__Inputs(this);
  }

  get outputs(): BuySetOfTokensCall__Outputs {
    return new BuySetOfTokensCall__Outputs(this);
  }
}

export class BuySetOfTokensCall__Inputs {
  _call: BuySetOfTokensCall;

  constructor(call: BuySetOfTokensCall) {
    this._call = call;
  }

  get listOfElementIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get listOfTokenAmounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get listOfPriceMaxLimits(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class BuySetOfTokensCall__Outputs {
  _call: BuySetOfTokensCall;

  constructor(call: BuySetOfTokensCall) {
    this._call = call;
  }
}

export class BuyTokenCall extends ethereum.Call {
  get inputs(): BuyTokenCall__Inputs {
    return new BuyTokenCall__Inputs(this);
  }

  get outputs(): BuyTokenCall__Outputs {
    return new BuyTokenCall__Outputs(this);
  }
}

export class BuyTokenCall__Inputs {
  _call: BuyTokenCall;

  constructor(call: BuyTokenCall) {
    this._call = call;
  }

  get swappingElementId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get priceMaxLimit(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BuyTokenCall__Outputs {
  _call: BuyTokenCall;

  constructor(call: BuyTokenCall) {
    this._call = call;
  }
}

export class DeactivateTimeBreakdownCall extends ethereum.Call {
  get inputs(): DeactivateTimeBreakdownCall__Inputs {
    return new DeactivateTimeBreakdownCall__Inputs(this);
  }

  get outputs(): DeactivateTimeBreakdownCall__Outputs {
    return new DeactivateTimeBreakdownCall__Outputs(this);
  }
}

export class DeactivateTimeBreakdownCall__Inputs {
  _call: DeactivateTimeBreakdownCall;

  constructor(call: DeactivateTimeBreakdownCall) {
    this._call = call;
  }

  get stakedElementName(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class DeactivateTimeBreakdownCall__Outputs {
  _call: DeactivateTimeBreakdownCall;

  constructor(call: DeactivateTimeBreakdownCall) {
    this._call = call;
  }
}

export class DeactivateYieldConfigCall extends ethereum.Call {
  get inputs(): DeactivateYieldConfigCall__Inputs {
    return new DeactivateYieldConfigCall__Inputs(this);
  }

  get outputs(): DeactivateYieldConfigCall__Outputs {
    return new DeactivateYieldConfigCall__Outputs(this);
  }
}

export class DeactivateYieldConfigCall__Inputs {
  _call: DeactivateYieldConfigCall;

  constructor(call: DeactivateYieldConfigCall) {
    this._call = call;
  }

  get season(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get plotWidth(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get plotHeight(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get tileArea(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get baseYield(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get plotType(): string {
    return this._call.inputValues[5].value.toString();
  }
}

export class DeactivateYieldConfigCall__Outputs {
  _call: DeactivateYieldConfigCall;

  constructor(call: DeactivateYieldConfigCall) {
    this._call = call;
  }
}

export class GameTokenBurnCall extends ethereum.Call {
  get inputs(): GameTokenBurnCall__Inputs {
    return new GameTokenBurnCall__Inputs(this);
  }

  get outputs(): GameTokenBurnCall__Outputs {
    return new GameTokenBurnCall__Outputs(this);
  }
}

export class GameTokenBurnCall__Inputs {
  _call: GameTokenBurnCall;

  constructor(call: GameTokenBurnCall) {
    this._call = call;
  }

  get addressToUpdate(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenElementId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amountToBeBurned(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class GameTokenBurnCall__Outputs {
  _call: GameTokenBurnCall;

  constructor(call: GameTokenBurnCall) {
    this._call = call;
  }
}

export class GameTokenMintCall extends ethereum.Call {
  get inputs(): GameTokenMintCall__Inputs {
    return new GameTokenMintCall__Inputs(this);
  }

  get outputs(): GameTokenMintCall__Outputs {
    return new GameTokenMintCall__Outputs(this);
  }
}

export class GameTokenMintCall__Inputs {
  _call: GameTokenMintCall;

  constructor(call: GameTokenMintCall) {
    this._call = call;
  }

  get addressToUpdate(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenElementId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amountToBeProduced(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class GameTokenMintCall__Outputs {
  _call: GameTokenMintCall;

  constructor(call: GameTokenMintCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get addressStoreAddress_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseGameCall extends ethereum.Call {
  get inputs(): PauseGameCall__Inputs {
    return new PauseGameCall__Inputs(this);
  }

  get outputs(): PauseGameCall__Outputs {
    return new PauseGameCall__Outputs(this);
  }
}

export class PauseGameCall__Inputs {
  _call: PauseGameCall;

  constructor(call: PauseGameCall) {
    this._call = call;
  }
}

export class PauseGameCall__Outputs {
  _call: PauseGameCall;

  constructor(call: PauseGameCall) {
    this._call = call;
  }
}

export class SellTokenCall extends ethereum.Call {
  get inputs(): SellTokenCall__Inputs {
    return new SellTokenCall__Inputs(this);
  }

  get outputs(): SellTokenCall__Outputs {
    return new SellTokenCall__Outputs(this);
  }
}

export class SellTokenCall__Inputs {
  _call: SellTokenCall;

  constructor(call: SellTokenCall) {
    this._call = call;
  }

  get swappingElementId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get priceMinLimit(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SellTokenCall__Outputs {
  _call: SellTokenCall;

  constructor(call: SellTokenCall) {
    this._call = call;
  }
}

export class TransferAddressStoreCall extends ethereum.Call {
  get inputs(): TransferAddressStoreCall__Inputs {
    return new TransferAddressStoreCall__Inputs(this);
  }

  get outputs(): TransferAddressStoreCall__Outputs {
    return new TransferAddressStoreCall__Outputs(this);
  }
}

export class TransferAddressStoreCall__Inputs {
  _call: TransferAddressStoreCall;

  constructor(call: TransferAddressStoreCall) {
    this._call = call;
  }

  get newAddressStore(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferAddressStoreCall__Outputs {
  _call: TransferAddressStoreCall;

  constructor(call: TransferAddressStoreCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseGameCall extends ethereum.Call {
  get inputs(): UnpauseGameCall__Inputs {
    return new UnpauseGameCall__Inputs(this);
  }

  get outputs(): UnpauseGameCall__Outputs {
    return new UnpauseGameCall__Outputs(this);
  }
}

export class UnpauseGameCall__Inputs {
  _call: UnpauseGameCall;

  constructor(call: UnpauseGameCall) {
    this._call = call;
  }
}

export class UnpauseGameCall__Outputs {
  _call: UnpauseGameCall;

  constructor(call: UnpauseGameCall) {
    this._call = call;
  }
}

export class UpdateGuardAddressLogCall extends ethereum.Call {
  get inputs(): UpdateGuardAddressLogCall__Inputs {
    return new UpdateGuardAddressLogCall__Inputs(this);
  }

  get outputs(): UpdateGuardAddressLogCall__Outputs {
    return new UpdateGuardAddressLogCall__Outputs(this);
  }
}

export class UpdateGuardAddressLogCall__Inputs {
  _call: UpdateGuardAddressLogCall;

  constructor(call: UpdateGuardAddressLogCall) {
    this._call = call;
  }

  get guardAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get setting(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class UpdateGuardAddressLogCall__Outputs {
  _call: UpdateGuardAddressLogCall;

  constructor(call: UpdateGuardAddressLogCall) {
    this._call = call;
  }
}

export class UpdateTimeBreakdownCall extends ethereum.Call {
  get inputs(): UpdateTimeBreakdownCall__Inputs {
    return new UpdateTimeBreakdownCall__Inputs(this);
  }

  get outputs(): UpdateTimeBreakdownCall__Outputs {
    return new UpdateTimeBreakdownCall__Outputs(this);
  }
}

export class UpdateTimeBreakdownCall__Inputs {
  _call: UpdateTimeBreakdownCall;

  constructor(call: UpdateTimeBreakdownCall) {
    this._call = call;
  }

  get stakedElementName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get nothingToStart(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get startToEarly(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get earlyToMature(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get matureToExpire(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class UpdateTimeBreakdownCall__Outputs {
  _call: UpdateTimeBreakdownCall;

  constructor(call: UpdateTimeBreakdownCall) {
    this._call = call;
  }
}

export class UpdateTimeBreakdownAddressCall extends ethereum.Call {
  get inputs(): UpdateTimeBreakdownAddressCall__Inputs {
    return new UpdateTimeBreakdownAddressCall__Inputs(this);
  }

  get outputs(): UpdateTimeBreakdownAddressCall__Outputs {
    return new UpdateTimeBreakdownAddressCall__Outputs(this);
  }
}

export class UpdateTimeBreakdownAddressCall__Inputs {
  _call: UpdateTimeBreakdownAddressCall;

  constructor(call: UpdateTimeBreakdownAddressCall) {
    this._call = call;
  }

  get stakedElementName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get addressStoreName(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class UpdateTimeBreakdownAddressCall__Outputs {
  _call: UpdateTimeBreakdownAddressCall;

  constructor(call: UpdateTimeBreakdownAddressCall) {
    this._call = call;
  }
}

export class UpdateYieldConfigCall extends ethereum.Call {
  get inputs(): UpdateYieldConfigCall__Inputs {
    return new UpdateYieldConfigCall__Inputs(this);
  }

  get outputs(): UpdateYieldConfigCall__Outputs {
    return new UpdateYieldConfigCall__Outputs(this);
  }
}

export class UpdateYieldConfigCall__Inputs {
  _call: UpdateYieldConfigCall;

  constructor(call: UpdateYieldConfigCall) {
    this._call = call;
  }

  get season(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get plotWidth(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get plotHeight(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get tileArea(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get baseYield(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get plotType(): string {
    return this._call.inputValues[5].value.toString();
  }

  get minYield(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get maxYield(): i32 {
    return this._call.inputValues[7].value.toI32();
  }
}

export class UpdateYieldConfigCall__Outputs {
  _call: UpdateYieldConfigCall;

  constructor(call: UpdateYieldConfigCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

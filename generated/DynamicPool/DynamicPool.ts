// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddressStoreChanged extends ethereum.Event {
  get params(): AddressStoreChanged__Params {
    return new AddressStoreChanged__Params(this);
  }
}

export class AddressStoreChanged__Params {
  _event: AddressStoreChanged;

  constructor(event: AddressStoreChanged) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldAddressStore(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newAddressStore(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class InitializedPool extends ethereum.Event {
  get params(): InitializedPool__Params {
    return new InitializedPool__Params(this);
  }
}

export class InitializedPool__Params {
  _event: InitializedPool;

  constructor(event: InitializedPool) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenReserveAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get goldAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get goldReserveAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ScaledPoolBalances extends ethereum.Event {
  get params(): ScaledPoolBalances__Params {
    return new ScaledPoolBalances__Params(this);
  }
}

export class ScaledPoolBalances__Params {
  _event: ScaledPoolBalances;

  constructor(event: ScaledPoolBalances) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get numeratorScaleFactor(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get denominatorScaleFactor(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get oldTrackedTokenBalance(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get newTrackedTokenBalance(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get oldTrackedGoldBalance(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get newTrackedGoldBalance(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get oldOverallTrackedGoldBalance(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get newOverallTrackedGoldBalance(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }
}

export class SentToTreasury extends ethereum.Event {
  get params(): SentToTreasury__Params {
    return new SentToTreasury__Params(this);
  }
}

export class SentToTreasury__Params {
  _event: SentToTreasury;

  constructor(event: SentToTreasury) {
    this._event = event;
  }

  get treasuryAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TransferredFromPool extends ethereum.Event {
  get params(): TransferredFromPool__Params {
    return new TransferredFromPool__Params(this);
  }
}

export class TransferredFromPool__Params {
  _event: TransferredFromPool;

  constructor(event: TransferredFromPool) {
    this._event = event;
  }

  get destinationAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get goldAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get originalInputAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get goldDelta(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get tokenDelta(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get updatedGoldBalance(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get updatedTokenBalance(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get isSwapperAdding(): boolean {
    return this._event.parameters[8].value.toBoolean();
  }

  get isInputTokenAmountGold(): boolean {
    return this._event.parameters[9].value.toBoolean();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpdatedGoldReserveAmount extends ethereum.Event {
  get params(): UpdatedGoldReserveAmount__Params {
    return new UpdatedGoldReserveAmount__Params(this);
  }
}

export class UpdatedGoldReserveAmount__Params {
  _event: UpdatedGoldReserveAmount;

  constructor(event: UpdatedGoldReserveAmount) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get oldGoldReserveAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newGoldReserveAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class UpdatedTokenReserveAmount extends ethereum.Event {
  get params(): UpdatedTokenReserveAmount__Params {
    return new UpdatedTokenReserveAmount__Params(this);
  }
}

export class UpdatedTokenReserveAmount__Params {
  _event: UpdatedTokenReserveAmount;

  constructor(event: UpdatedTokenReserveAmount) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get oldTokenReserveAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newTokenReserveAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DynamicPool__calculateUpdatedBalancesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class DynamicPool__quoteSwapValueWithTokenAddressResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DynamicPool__quoteSwapValueWithTokenNameResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DynamicPool__versionResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class DynamicPool__versionGameStatusResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class DynamicPool__versionGameUtilResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class DynamicPool__versionPoolDetailsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class DynamicPool__versionSystemPointersResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class DynamicPool extends ethereum.SmartContract {
  static bind(address: Address): DynamicPool {
    return new DynamicPool("DynamicPool", address);
  }

  AS_ENGINE_ADDRESS(): Bytes {
    let result = super.call(
      "AS_ENGINE_ADDRESS",
      "AS_ENGINE_ADDRESS():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_AS_ENGINE_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_ENGINE_ADDRESS",
      "AS_ENGINE_ADDRESS():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_GOLD_ADDRESS(): Bytes {
    let result = super.call(
      "AS_GOLD_ADDRESS",
      "AS_GOLD_ADDRESS():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_AS_GOLD_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_GOLD_ADDRESS",
      "AS_GOLD_ADDRESS():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_POOL_ADDRESS(): Bytes {
    let result = super.call(
      "AS_POOL_ADDRESS",
      "AS_POOL_ADDRESS():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_AS_POOL_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_POOL_ADDRESS",
      "AS_POOL_ADDRESS():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_ROLE_REGISTRY_ADDRESS(): Bytes {
    let result = super.call(
      "AS_ROLE_REGISTRY_ADDRESS",
      "AS_ROLE_REGISTRY_ADDRESS():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_AS_ROLE_REGISTRY_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_ROLE_REGISTRY_ADDRESS",
      "AS_ROLE_REGISTRY_ADDRESS():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_TEAM_ADDRESS(): Bytes {
    let result = super.call(
      "AS_TEAM_ADDRESS",
      "AS_TEAM_ADDRESS():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_AS_TEAM_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_TEAM_ADDRESS",
      "AS_TEAM_ADDRESS():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_TREASURY_ADDRESS(): Bytes {
    let result = super.call(
      "AS_TREASURY_ADDRESS",
      "AS_TREASURY_ADDRESS():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_AS_TREASURY_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_TREASURY_ADDRESS",
      "AS_TREASURY_ADDRESS():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_ADDRESS_CONTROLLER_ROLE(): Bytes {
    let result = super.call(
      "RR_ADDRESS_CONTROLLER_ROLE",
      "RR_ADDRESS_CONTROLLER_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_RR_ADDRESS_CONTROLLER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "RR_ADDRESS_CONTROLLER_ROLE",
      "RR_ADDRESS_CONTROLLER_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_GAME_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "RR_GAME_ADMIN_ROLE",
      "RR_GAME_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_RR_GAME_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "RR_GAME_ADMIN_ROLE",
      "RR_GAME_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_GAME_ROLE(): Bytes {
    let result = super.call("RR_GAME_ROLE", "RR_GAME_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_RR_GAME_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("RR_GAME_ROLE", "RR_GAME_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_OPERATOR_ROLE(): Bytes {
    let result = super.call(
      "RR_OPERATOR_ROLE",
      "RR_OPERATOR_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_RR_OPERATOR_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "RR_OPERATOR_ROLE",
      "RR_OPERATOR_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_PAUSER_ROLE(): Bytes {
    let result = super.call("RR_PAUSER_ROLE", "RR_PAUSER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_RR_PAUSER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "RR_PAUSER_ROLE",
      "RR_PAUSER_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_POOL_ROLE(): Bytes {
    let result = super.call("RR_POOL_ROLE", "RR_POOL_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_RR_POOL_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("RR_POOL_ROLE", "RR_POOL_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_TEAM_ROLE(): Bytes {
    let result = super.call("RR_TEAM_ROLE", "RR_TEAM_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_RR_TEAM_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("RR_TEAM_ROLE", "RR_TEAM_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_TREASURY_ROLE(): Bytes {
    let result = super.call(
      "RR_TREASURY_ROLE",
      "RR_TREASURY_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_RR_TREASURY_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "RR_TREASURY_ROLE",
      "RR_TREASURY_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_UPGRADER_ROLE(): Bytes {
    let result = super.call(
      "RR_UPGRADER_ROLE",
      "RR_UPGRADER_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_RR_UPGRADER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "RR_UPGRADER_ROLE",
      "RR_UPGRADER_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  addressStore(): Address {
    let result = super.call("addressStore", "addressStore():(address)", []);

    return result[0].toAddress();
  }

  try_addressStore(): ethereum.CallResult<Address> {
    let result = super.tryCall("addressStore", "addressStore():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceAboveLimitOfGold(tokenAddress: Address): BigInt {
    let result = super.call(
      "balanceAboveLimitOfGold",
      "balanceAboveLimitOfGold(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );

    return result[0].toBigInt();
  }

  try_balanceAboveLimitOfGold(
    tokenAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceAboveLimitOfGold",
      "balanceAboveLimitOfGold(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceAboveLimitOfToken(tokenAddress: Address): BigInt {
    let result = super.call(
      "balanceAboveLimitOfToken",
      "balanceAboveLimitOfToken(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );

    return result[0].toBigInt();
  }

  try_balanceAboveLimitOfToken(
    tokenAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceAboveLimitOfToken",
      "balanceAboveLimitOfToken(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(tokenAddressName: string): BigInt {
    let result = super.call("balanceOf", "balanceOf(string):(uint256)", [
      ethereum.Value.fromString(tokenAddressName)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(tokenAddressName: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(string):(uint256)", [
      ethereum.Value.fromString(tokenAddressName)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateUpdatedBalances(
    tokenAddress: Address,
    tokenAmount: BigInt,
    isAdding: boolean,
    isTokenAmountGold: boolean
  ): DynamicPool__calculateUpdatedBalancesResult {
    let result = super.call(
      "calculateUpdatedBalances",
      "calculateUpdatedBalances(address,uint256,bool,bool):(uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigInt(tokenAmount),
        ethereum.Value.fromBoolean(isAdding),
        ethereum.Value.fromBoolean(isTokenAmountGold)
      ]
    );

    return new DynamicPool__calculateUpdatedBalancesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_calculateUpdatedBalances(
    tokenAddress: Address,
    tokenAmount: BigInt,
    isAdding: boolean,
    isTokenAmountGold: boolean
  ): ethereum.CallResult<DynamicPool__calculateUpdatedBalancesResult> {
    let result = super.tryCall(
      "calculateUpdatedBalances",
      "calculateUpdatedBalances(address,uint256,bool,bool):(uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigInt(tokenAmount),
        ethereum.Value.fromBoolean(isAdding),
        ethereum.Value.fromBoolean(isTokenAmountGold)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DynamicPool__calculateUpdatedBalancesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  gameEngine(): Address {
    let result = super.call("gameEngine", "gameEngine():(address)", []);

    return result[0].toAddress();
  }

  try_gameEngine(): ethereum.CallResult<Address> {
    let result = super.tryCall("gameEngine", "gameEngine():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  goldAddress(): Address {
    let result = super.call("goldAddress", "goldAddress():(address)", []);

    return result[0].toAddress();
  }

  try_goldAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("goldAddress", "goldAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  goldReserveAmount(tokenAddress: Address): BigInt {
    let result = super.call(
      "goldReserveAmount",
      "goldReserveAmount(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );

    return result[0].toBigInt();
  }

  try_goldReserveAmount(tokenAddress: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "goldReserveAmount",
      "goldReserveAmount(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  initializedPools(): Array<Address> {
    let result = super.call(
      "initializedPools",
      "initializedPools():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_initializedPools(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "initializedPools",
      "initializedPools():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  isPoolInitialized(tokenAddress: Address): boolean {
    let result = super.call(
      "isPoolInitialized",
      "isPoolInitialized(address):(bool)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );

    return result[0].toBoolean();
  }

  try_isPoolInitialized(tokenAddress: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isPoolInitialized",
      "isPoolInitialized(address):(bool)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  kValueOfGoldAndTokenAddress(tokenAddress: Address): BigInt {
    let result = super.call(
      "kValueOfGoldAndTokenAddress",
      "kValueOfGoldAndTokenAddress(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );

    return result[0].toBigInt();
  }

  try_kValueOfGoldAndTokenAddress(
    tokenAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "kValueOfGoldAndTokenAddress",
      "kValueOfGoldAndTokenAddress(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  kValueOfGoldAndTokenName(tokenAddressName: string): BigInt {
    let result = super.call(
      "kValueOfGoldAndTokenName",
      "kValueOfGoldAndTokenName(string):(uint256)",
      [ethereum.Value.fromString(tokenAddressName)]
    );

    return result[0].toBigInt();
  }

  try_kValueOfGoldAndTokenName(
    tokenAddressName: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "kValueOfGoldAndTokenName",
      "kValueOfGoldAndTokenName(string):(uint256)",
      [ethereum.Value.fromString(tokenAddressName)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pausedGame(): boolean {
    let result = super.call("pausedGame", "pausedGame():(bool)", []);

    return result[0].toBoolean();
  }

  try_pausedGame(): ethereum.CallResult<boolean> {
    let result = super.tryCall("pausedGame", "pausedGame():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  poolAddress(): Address {
    let result = super.call("poolAddress", "poolAddress():(address)", []);

    return result[0].toAddress();
  }

  try_poolAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("poolAddress", "poolAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  quoteSwapValueWithTokenAddress(
    tokenAddress: Address,
    tokenAmount: BigInt,
    isAdding: boolean,
    isTokenAmountGold: boolean
  ): DynamicPool__quoteSwapValueWithTokenAddressResult {
    let result = super.call(
      "quoteSwapValueWithTokenAddress",
      "quoteSwapValueWithTokenAddress(address,uint256,bool,bool):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigInt(tokenAmount),
        ethereum.Value.fromBoolean(isAdding),
        ethereum.Value.fromBoolean(isTokenAmountGold)
      ]
    );

    return new DynamicPool__quoteSwapValueWithTokenAddressResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_quoteSwapValueWithTokenAddress(
    tokenAddress: Address,
    tokenAmount: BigInt,
    isAdding: boolean,
    isTokenAmountGold: boolean
  ): ethereum.CallResult<DynamicPool__quoteSwapValueWithTokenAddressResult> {
    let result = super.tryCall(
      "quoteSwapValueWithTokenAddress",
      "quoteSwapValueWithTokenAddress(address,uint256,bool,bool):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigInt(tokenAmount),
        ethereum.Value.fromBoolean(isAdding),
        ethereum.Value.fromBoolean(isTokenAmountGold)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DynamicPool__quoteSwapValueWithTokenAddressResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  quoteSwapValueWithTokenName(
    tokenAddressName: string,
    tokenAmount: BigInt,
    isAdding: boolean,
    isTokenAmountGold: boolean
  ): DynamicPool__quoteSwapValueWithTokenNameResult {
    let result = super.call(
      "quoteSwapValueWithTokenName",
      "quoteSwapValueWithTokenName(string,uint256,bool,bool):(uint256,uint256)",
      [
        ethereum.Value.fromString(tokenAddressName),
        ethereum.Value.fromUnsignedBigInt(tokenAmount),
        ethereum.Value.fromBoolean(isAdding),
        ethereum.Value.fromBoolean(isTokenAmountGold)
      ]
    );

    return new DynamicPool__quoteSwapValueWithTokenNameResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_quoteSwapValueWithTokenName(
    tokenAddressName: string,
    tokenAmount: BigInt,
    isAdding: boolean,
    isTokenAmountGold: boolean
  ): ethereum.CallResult<DynamicPool__quoteSwapValueWithTokenNameResult> {
    let result = super.tryCall(
      "quoteSwapValueWithTokenName",
      "quoteSwapValueWithTokenName(string,uint256,bool,bool):(uint256,uint256)",
      [
        ethereum.Value.fromString(tokenAddressName),
        ethereum.Value.fromUnsignedBigInt(tokenAmount),
        ethereum.Value.fromBoolean(isAdding),
        ethereum.Value.fromBoolean(isTokenAmountGold)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DynamicPool__quoteSwapValueWithTokenNameResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  roleRegistry(): Address {
    let result = super.call("roleRegistry", "roleRegistry():(address)", []);

    return result[0].toAddress();
  }

  try_roleRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall("roleRegistry", "roleRegistry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenReserveAmount(tokenAddress: Address): BigInt {
    let result = super.call(
      "tokenReserveAmount",
      "tokenReserveAmount(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );

    return result[0].toBigInt();
  }

  try_tokenReserveAmount(tokenAddress: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenReserveAmount",
      "tokenReserveAmount(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenSpecificGoldBalance(tokenAddress: Address): BigInt {
    let result = super.call(
      "tokenSpecificGoldBalance",
      "tokenSpecificGoldBalance(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );

    return result[0].toBigInt();
  }

  try_tokenSpecificGoldBalance(
    tokenAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenSpecificGoldBalance",
      "tokenSpecificGoldBalance(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalGoldBalance(): BigInt {
    let result = super.call(
      "totalGoldBalance",
      "totalGoldBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalGoldBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalGoldBalance",
      "totalGoldBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalTokenBalance(tokenAddress: Address): BigInt {
    let result = super.call(
      "totalTokenBalance",
      "totalTokenBalance(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );

    return result[0].toBigInt();
  }

  try_totalTokenBalance(tokenAddress: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalTokenBalance",
      "totalTokenBalance(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  trackedGoldBalance(): BigInt {
    let result = super.call(
      "trackedGoldBalance",
      "trackedGoldBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_trackedGoldBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "trackedGoldBalance",
      "trackedGoldBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  trackedTokenBalance(tokenAddress: Address): BigInt {
    let result = super.call(
      "trackedTokenBalance",
      "trackedTokenBalance(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );

    return result[0].toBigInt();
  }

  try_trackedTokenBalance(tokenAddress: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "trackedTokenBalance",
      "trackedTokenBalance(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treasuryAddress(): Address {
    let result = super.call(
      "treasuryAddress",
      "treasuryAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_treasuryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "treasuryAddress",
      "treasuryAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  version(): DynamicPool__versionResult {
    let result = super.call(
      "version",
      "version():(uint256,uint256,uint256)",
      []
    );

    return new DynamicPool__versionResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_version(): ethereum.CallResult<DynamicPool__versionResult> {
    let result = super.tryCall(
      "version",
      "version():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DynamicPool__versionResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  versionGameStatus(): DynamicPool__versionGameStatusResult {
    let result = super.call(
      "versionGameStatus",
      "versionGameStatus():(uint256,uint256,uint256)",
      []
    );

    return new DynamicPool__versionGameStatusResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_versionGameStatus(): ethereum.CallResult<
    DynamicPool__versionGameStatusResult
  > {
    let result = super.tryCall(
      "versionGameStatus",
      "versionGameStatus():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DynamicPool__versionGameStatusResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  versionGameUtil(): DynamicPool__versionGameUtilResult {
    let result = super.call(
      "versionGameUtil",
      "versionGameUtil():(uint256,uint256,uint256)",
      []
    );

    return new DynamicPool__versionGameUtilResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_versionGameUtil(): ethereum.CallResult<
    DynamicPool__versionGameUtilResult
  > {
    let result = super.tryCall(
      "versionGameUtil",
      "versionGameUtil():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DynamicPool__versionGameUtilResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  versionPoolDetails(): DynamicPool__versionPoolDetailsResult {
    let result = super.call(
      "versionPoolDetails",
      "versionPoolDetails():(uint256,uint256,uint256)",
      []
    );

    return new DynamicPool__versionPoolDetailsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_versionPoolDetails(): ethereum.CallResult<
    DynamicPool__versionPoolDetailsResult
  > {
    let result = super.tryCall(
      "versionPoolDetails",
      "versionPoolDetails():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DynamicPool__versionPoolDetailsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  versionSystemPointers(): DynamicPool__versionSystemPointersResult {
    let result = super.call(
      "versionSystemPointers",
      "versionSystemPointers():(uint256,uint256,uint256)",
      []
    );

    return new DynamicPool__versionSystemPointersResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_versionSystemPointers(): ethereum.CallResult<
    DynamicPool__versionSystemPointersResult
  > {
    let result = super.tryCall(
      "versionSystemPointers",
      "versionSystemPointers():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DynamicPool__versionSystemPointersResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get addressStoreAddress_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializePoolCall extends ethereum.Call {
  get inputs(): InitializePoolCall__Inputs {
    return new InitializePoolCall__Inputs(this);
  }

  get outputs(): InitializePoolCall__Outputs {
    return new InitializePoolCall__Outputs(this);
  }
}

export class InitializePoolCall__Inputs {
  _call: InitializePoolCall;

  constructor(call: InitializePoolCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get initialTrackedTokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get initialTokenReserveAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get initialTrackedGoldAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get initialGoldReserveAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class InitializePoolCall__Outputs {
  _call: InitializePoolCall;

  constructor(call: InitializePoolCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class ScalePoolBalancesCall extends ethereum.Call {
  get inputs(): ScalePoolBalancesCall__Inputs {
    return new ScalePoolBalancesCall__Inputs(this);
  }

  get outputs(): ScalePoolBalancesCall__Outputs {
    return new ScalePoolBalancesCall__Outputs(this);
  }
}

export class ScalePoolBalancesCall__Inputs {
  _call: ScalePoolBalancesCall;

  constructor(call: ScalePoolBalancesCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get numeratorScaleFactor(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get denominatorScaleFactor(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ScalePoolBalancesCall__Outputs {
  _call: ScalePoolBalancesCall;

  constructor(call: ScalePoolBalancesCall) {
    this._call = call;
  }
}

export class SendToTreasuryCall extends ethereum.Call {
  get inputs(): SendToTreasuryCall__Inputs {
    return new SendToTreasuryCall__Inputs(this);
  }

  get outputs(): SendToTreasuryCall__Outputs {
    return new SendToTreasuryCall__Outputs(this);
  }
}

export class SendToTreasuryCall__Inputs {
  _call: SendToTreasuryCall;

  constructor(call: SendToTreasuryCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SendToTreasuryCall__Outputs {
  _call: SendToTreasuryCall;

  constructor(call: SendToTreasuryCall) {
    this._call = call;
  }
}

export class SwapFromPoolCall extends ethereum.Call {
  get inputs(): SwapFromPoolCall__Inputs {
    return new SwapFromPoolCall__Inputs(this);
  }

  get outputs(): SwapFromPoolCall__Outputs {
    return new SwapFromPoolCall__Outputs(this);
  }
}

export class SwapFromPoolCall__Inputs {
  _call: SwapFromPoolCall;

  constructor(call: SwapFromPoolCall) {
    this._call = call;
  }

  get destinationAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get isAdding(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get isTokenAmountGold(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class SwapFromPoolCall__Outputs {
  _call: SwapFromPoolCall;

  constructor(call: SwapFromPoolCall) {
    this._call = call;
  }
}

export class TransferAddressStoreCall extends ethereum.Call {
  get inputs(): TransferAddressStoreCall__Inputs {
    return new TransferAddressStoreCall__Inputs(this);
  }

  get outputs(): TransferAddressStoreCall__Outputs {
    return new TransferAddressStoreCall__Outputs(this);
  }
}

export class TransferAddressStoreCall__Inputs {
  _call: TransferAddressStoreCall;

  constructor(call: TransferAddressStoreCall) {
    this._call = call;
  }

  get newAddressStore(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferAddressStoreCall__Outputs {
  _call: TransferAddressStoreCall;

  constructor(call: TransferAddressStoreCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateGoldReserveAmountForTokenCall extends ethereum.Call {
  get inputs(): UpdateGoldReserveAmountForTokenCall__Inputs {
    return new UpdateGoldReserveAmountForTokenCall__Inputs(this);
  }

  get outputs(): UpdateGoldReserveAmountForTokenCall__Outputs {
    return new UpdateGoldReserveAmountForTokenCall__Outputs(this);
  }
}

export class UpdateGoldReserveAmountForTokenCall__Inputs {
  _call: UpdateGoldReserveAmountForTokenCall;

  constructor(call: UpdateGoldReserveAmountForTokenCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newGoldReserveAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateGoldReserveAmountForTokenCall__Outputs {
  _call: UpdateGoldReserveAmountForTokenCall;

  constructor(call: UpdateGoldReserveAmountForTokenCall) {
    this._call = call;
  }
}

export class UpdateTokenAndGoldReserveAmountCall extends ethereum.Call {
  get inputs(): UpdateTokenAndGoldReserveAmountCall__Inputs {
    return new UpdateTokenAndGoldReserveAmountCall__Inputs(this);
  }

  get outputs(): UpdateTokenAndGoldReserveAmountCall__Outputs {
    return new UpdateTokenAndGoldReserveAmountCall__Outputs(this);
  }
}

export class UpdateTokenAndGoldReserveAmountCall__Inputs {
  _call: UpdateTokenAndGoldReserveAmountCall;

  constructor(call: UpdateTokenAndGoldReserveAmountCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newTokenReserveAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get newGoldReserveAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateTokenAndGoldReserveAmountCall__Outputs {
  _call: UpdateTokenAndGoldReserveAmountCall;

  constructor(call: UpdateTokenAndGoldReserveAmountCall) {
    this._call = call;
  }
}

export class UpdateTokenReserveAmountCall extends ethereum.Call {
  get inputs(): UpdateTokenReserveAmountCall__Inputs {
    return new UpdateTokenReserveAmountCall__Inputs(this);
  }

  get outputs(): UpdateTokenReserveAmountCall__Outputs {
    return new UpdateTokenReserveAmountCall__Outputs(this);
  }
}

export class UpdateTokenReserveAmountCall__Inputs {
  _call: UpdateTokenReserveAmountCall;

  constructor(call: UpdateTokenReserveAmountCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newTokenReserveAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateTokenReserveAmountCall__Outputs {
  _call: UpdateTokenReserveAmountCall;

  constructor(call: UpdateTokenReserveAmountCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

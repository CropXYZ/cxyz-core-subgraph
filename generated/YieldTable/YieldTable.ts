// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ActivatedYieldConfig extends ethereum.Event {
  get params(): ActivatedYieldConfig__Params {
    return new ActivatedYieldConfig__Params(this);
  }
}

export class ActivatedYieldConfig__Params {
  _event: ActivatedYieldConfig;

  constructor(event: ActivatedYieldConfig) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get yieldTableId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get season(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get plotWidth(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get plotHeight(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get tileArea(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get baseYield(): i32 {
    return this._event.parameters[6].value.toI32();
  }

  get plotType(): string {
    return this._event.parameters[7].value.toString();
  }

  get plotTypeId(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class AddedYieldConfig extends ethereum.Event {
  get params(): AddedYieldConfig__Params {
    return new AddedYieldConfig__Params(this);
  }
}

export class AddedYieldConfig__Params {
  _event: AddedYieldConfig;

  constructor(event: AddedYieldConfig) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get yieldTableId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get season(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get plotWidth(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get plotHeight(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get tileArea(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get baseYield(): i32 {
    return this._event.parameters[6].value.toI32();
  }

  get plotType(): string {
    return this._event.parameters[7].value.toString();
  }

  get plotTypeId(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get minYield(): i32 {
    return this._event.parameters[9].value.toI32();
  }

  get maxYield(): i32 {
    return this._event.parameters[10].value.toI32();
  }

  get isActive(): boolean {
    return this._event.parameters[11].value.toBoolean();
  }
}

export class AddressStoreChanged extends ethereum.Event {
  get params(): AddressStoreChanged__Params {
    return new AddressStoreChanged__Params(this);
  }
}

export class AddressStoreChanged__Params {
  _event: AddressStoreChanged;

  constructor(event: AddressStoreChanged) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldAddressStore(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newAddressStore(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class DeactivatedYieldConfig extends ethereum.Event {
  get params(): DeactivatedYieldConfig__Params {
    return new DeactivatedYieldConfig__Params(this);
  }
}

export class DeactivatedYieldConfig__Params {
  _event: DeactivatedYieldConfig;

  constructor(event: DeactivatedYieldConfig) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get yieldTableId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get season(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get plotWidth(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get plotHeight(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get tileArea(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get baseYield(): i32 {
    return this._event.parameters[6].value.toI32();
  }

  get plotType(): string {
    return this._event.parameters[7].value.toString();
  }

  get plotTypeId(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpdatedGuardAddressLog extends ethereum.Event {
  get params(): UpdatedGuardAddressLog__Params {
    return new UpdatedGuardAddressLog__Params(this);
  }
}

export class UpdatedGuardAddressLog__Params {
  _event: UpdatedGuardAddressLog;

  constructor(event: UpdatedGuardAddressLog) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get guardAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newSetting(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get previousSetting(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class UpdatedYieldConfig extends ethereum.Event {
  get params(): UpdatedYieldConfig__Params {
    return new UpdatedYieldConfig__Params(this);
  }
}

export class UpdatedYieldConfig__Params {
  _event: UpdatedYieldConfig;

  constructor(event: UpdatedYieldConfig) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get yieldTableId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get season(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get plotWidth(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get plotHeight(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get tileArea(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get baseYield(): i32 {
    return this._event.parameters[6].value.toI32();
  }

  get plotType(): string {
    return this._event.parameters[7].value.toString();
  }

  get plotTypeId(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get minYield(): i32 {
    return this._event.parameters[9].value.toI32();
  }

  get maxYield(): i32 {
    return this._event.parameters[10].value.toI32();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class YieldTable__versionResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }
}

export class YieldTable__versionGameUtilResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }
}

export class YieldTable__versionGuardResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }
}

export class YieldTable__versionSystemPointersResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }
}

export class YieldTable__yieldRangeWithPlotTypeIdResult {
  value0: i32;
  value1: i32;

  constructor(value0: i32, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0)),
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1)),
    );
    return map;
  }

  getValue0(): i32 {
    return this.value0;
  }

  getValue1(): i32 {
    return this.value1;
  }
}

export class YieldTable__yieldRangeWithPlotTypeNameResult {
  value0: i32;
  value1: i32;

  constructor(value0: i32, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0)),
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1)),
    );
    return map;
  }

  getValue0(): i32 {
    return this.value0;
  }

  getValue1(): i32 {
    return this.value1;
  }
}

export class YieldTable extends ethereum.SmartContract {
  static bind(address: Address): YieldTable {
    return new YieldTable("YieldTable", address);
  }

  APP_KEY_SKYONEER(): Bytes {
    let result = super.call(
      "APP_KEY_SKYONEER",
      "APP_KEY_SKYONEER():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_APP_KEY_SKYONEER(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "APP_KEY_SKYONEER",
      "APP_KEY_SKYONEER():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  APP_KEY_SYSTEM(): Bytes {
    let result = super.call("APP_KEY_SYSTEM", "APP_KEY_SYSTEM():(bytes32)", []);

    return result[0].toBytes();
  }

  try_APP_KEY_SYSTEM(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "APP_KEY_SYSTEM",
      "APP_KEY_SYSTEM():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_ENGINE_ADDRESS(): Bytes {
    let result = super.call(
      "AS_ENGINE_ADDRESS",
      "AS_ENGINE_ADDRESS():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_AS_ENGINE_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_ENGINE_ADDRESS",
      "AS_ENGINE_ADDRESS():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_GOLD_ADDRESS(): Bytes {
    let result = super.call(
      "AS_GOLD_ADDRESS",
      "AS_GOLD_ADDRESS():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_AS_GOLD_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_GOLD_ADDRESS",
      "AS_GOLD_ADDRESS():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_PLOT_ACTIONS_ADDRESS(): Bytes {
    let result = super.call(
      "AS_PLOT_ACTIONS_ADDRESS",
      "AS_PLOT_ACTIONS_ADDRESS():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_AS_PLOT_ACTIONS_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_PLOT_ACTIONS_ADDRESS",
      "AS_PLOT_ACTIONS_ADDRESS():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_PLOT_ADDRESS(): Bytes {
    let result = super.call(
      "AS_PLOT_ADDRESS",
      "AS_PLOT_ADDRESS():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_AS_PLOT_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_PLOT_ADDRESS",
      "AS_PLOT_ADDRESS():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_PLOT_METADATA_ADDRESS(): Bytes {
    let result = super.call(
      "AS_PLOT_METADATA_ADDRESS",
      "AS_PLOT_METADATA_ADDRESS():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_AS_PLOT_METADATA_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_PLOT_METADATA_ADDRESS",
      "AS_PLOT_METADATA_ADDRESS():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_PLOT_TYPE_ADDRESS(): Bytes {
    let result = super.call(
      "AS_PLOT_TYPE_ADDRESS",
      "AS_PLOT_TYPE_ADDRESS():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_AS_PLOT_TYPE_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_PLOT_TYPE_ADDRESS",
      "AS_PLOT_TYPE_ADDRESS():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_POOL_CORE_ADDRESS(): Bytes {
    let result = super.call(
      "AS_POOL_CORE_ADDRESS",
      "AS_POOL_CORE_ADDRESS():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_AS_POOL_CORE_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_POOL_CORE_ADDRESS",
      "AS_POOL_CORE_ADDRESS():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_POOL_DETAILS_ADDRESS(): Bytes {
    let result = super.call(
      "AS_POOL_DETAILS_ADDRESS",
      "AS_POOL_DETAILS_ADDRESS():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_AS_POOL_DETAILS_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_POOL_DETAILS_ADDRESS",
      "AS_POOL_DETAILS_ADDRESS():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_ROLE_REGISTRY_ADDRESS(): Bytes {
    let result = super.call(
      "AS_ROLE_REGISTRY_ADDRESS",
      "AS_ROLE_REGISTRY_ADDRESS():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_AS_ROLE_REGISTRY_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_ROLE_REGISTRY_ADDRESS",
      "AS_ROLE_REGISTRY_ADDRESS():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_STARTER_PACK_ACTIVATION_DEST_ADDRESS(): Bytes {
    let result = super.call(
      "AS_STARTER_PACK_ACTIVATION_DEST_ADDRESS",
      "AS_STARTER_PACK_ACTIVATION_DEST_ADDRESS():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_AS_STARTER_PACK_ACTIVATION_DEST_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_STARTER_PACK_ACTIVATION_DEST_ADDRESS",
      "AS_STARTER_PACK_ACTIVATION_DEST_ADDRESS():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_STARTER_PACK_ACTIVATION_SRC_ADDRESS(): Bytes {
    let result = super.call(
      "AS_STARTER_PACK_ACTIVATION_SRC_ADDRESS",
      "AS_STARTER_PACK_ACTIVATION_SRC_ADDRESS():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_AS_STARTER_PACK_ACTIVATION_SRC_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_STARTER_PACK_ACTIVATION_SRC_ADDRESS",
      "AS_STARTER_PACK_ACTIVATION_SRC_ADDRESS():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_STARTER_PACK_ADDRESS(): Bytes {
    let result = super.call(
      "AS_STARTER_PACK_ADDRESS",
      "AS_STARTER_PACK_ADDRESS():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_AS_STARTER_PACK_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_STARTER_PACK_ADDRESS",
      "AS_STARTER_PACK_ADDRESS():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_SYSTEM_STATUS_ADDRESS(): Bytes {
    let result = super.call(
      "AS_SYSTEM_STATUS_ADDRESS",
      "AS_SYSTEM_STATUS_ADDRESS():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_AS_SYSTEM_STATUS_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_SYSTEM_STATUS_ADDRESS",
      "AS_SYSTEM_STATUS_ADDRESS():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_TEAM_ADDRESS(): Bytes {
    let result = super.call(
      "AS_TEAM_ADDRESS",
      "AS_TEAM_ADDRESS():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_AS_TEAM_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_TEAM_ADDRESS",
      "AS_TEAM_ADDRESS():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_TIME_BREAKDOWN_ADDRESS(): Bytes {
    let result = super.call(
      "AS_TIME_BREAKDOWN_ADDRESS",
      "AS_TIME_BREAKDOWN_ADDRESS():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_AS_TIME_BREAKDOWN_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_TIME_BREAKDOWN_ADDRESS",
      "AS_TIME_BREAKDOWN_ADDRESS():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_TREASURY_ADDRESS(): Bytes {
    let result = super.call(
      "AS_TREASURY_ADDRESS",
      "AS_TREASURY_ADDRESS():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_AS_TREASURY_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_TREASURY_ADDRESS",
      "AS_TREASURY_ADDRESS():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_YIELD_TABLE_ADDRESS(): Bytes {
    let result = super.call(
      "AS_YIELD_TABLE_ADDRESS",
      "AS_YIELD_TABLE_ADDRESS():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_AS_YIELD_TABLE_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_YIELD_TABLE_ADDRESS",
      "AS_YIELD_TABLE_ADDRESS():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_DAPP_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "RR_DAPP_ADMIN_ROLE",
      "RR_DAPP_ADMIN_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_RR_DAPP_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "RR_DAPP_ADMIN_ROLE",
      "RR_DAPP_ADMIN_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_DAPP_PAUSER_ROLE(): Bytes {
    let result = super.call(
      "RR_DAPP_PAUSER_ROLE",
      "RR_DAPP_PAUSER_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_RR_DAPP_PAUSER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "RR_DAPP_PAUSER_ROLE",
      "RR_DAPP_PAUSER_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_DAPP_UPGRADER_ROLE(): Bytes {
    let result = super.call(
      "RR_DAPP_UPGRADER_ROLE",
      "RR_DAPP_UPGRADER_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_RR_DAPP_UPGRADER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "RR_DAPP_UPGRADER_ROLE",
      "RR_DAPP_UPGRADER_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_GAME_MINTER_ROLE(): Bytes {
    let result = super.call(
      "RR_GAME_MINTER_ROLE",
      "RR_GAME_MINTER_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_RR_GAME_MINTER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "RR_GAME_MINTER_ROLE",
      "RR_GAME_MINTER_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_GAME_ROLE(): Bytes {
    let result = super.call("RR_GAME_ROLE", "RR_GAME_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_RR_GAME_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("RR_GAME_ROLE", "RR_GAME_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  UPGRADE_INTERFACE_VERSION(): string {
    let result = super.call(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      [],
    );

    return result[0].toString();
  }

  try_UPGRADE_INTERFACE_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  addressStore(): Address {
    let result = super.call("addressStore", "addressStore():(address)", []);

    return result[0].toAddress();
  }

  try_addressStore(): ethereum.CallResult<Address> {
    let result = super.tryCall("addressStore", "addressStore():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  goldAddress(): Address {
    let result = super.call("goldAddress", "goldAddress():(address)", []);

    return result[0].toAddress();
  }

  try_goldAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("goldAddress", "goldAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  guardAddressBoost(guardAddress: Address): i32 {
    let result = super.call(
      "guardAddressBoost",
      "guardAddressBoost(address):(uint8)",
      [ethereum.Value.fromAddress(guardAddress)],
    );

    return result[0].toI32();
  }

  try_guardAddressBoost(guardAddress: Address): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "guardAddressBoost",
      "guardAddressBoost(address):(uint8)",
      [ethereum.Value.fromAddress(guardAddress)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  harvestableYield(
    season: i32,
    plotWidth: i32,
    plotHeight: i32,
    tileArea: i32,
    baseYield: i32,
    plotTypeIdEntered: BigInt,
    tokenElementId: BigInt,
    guardAddress: Address,
  ): i32 {
    let result = super.call(
      "harvestableYield",
      "harvestableYield(uint8,uint8,uint8,uint8,uint8,uint256,uint256,address):(uint16)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(season)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotWidth)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotHeight)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tileArea)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(baseYield)),
        ethereum.Value.fromUnsignedBigInt(plotTypeIdEntered),
        ethereum.Value.fromUnsignedBigInt(tokenElementId),
        ethereum.Value.fromAddress(guardAddress),
      ],
    );

    return result[0].toI32();
  }

  try_harvestableYield(
    season: i32,
    plotWidth: i32,
    plotHeight: i32,
    tileArea: i32,
    baseYield: i32,
    plotTypeIdEntered: BigInt,
    tokenElementId: BigInt,
    guardAddress: Address,
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "harvestableYield",
      "harvestableYield(uint8,uint8,uint8,uint8,uint8,uint256,uint256,address):(uint16)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(season)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotWidth)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotHeight)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tileArea)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(baseYield)),
        ethereum.Value.fromUnsignedBigInt(plotTypeIdEntered),
        ethereum.Value.fromUnsignedBigInt(tokenElementId),
        ethereum.Value.fromAddress(guardAddress),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  isYieldRangeActiveWithPlotId(
    season: i32,
    plotWidth: i32,
    plotHeight: i32,
    tileArea: i32,
    baseYield: i32,
    plotTypeIdEntered: BigInt,
  ): boolean {
    let result = super.call(
      "isYieldRangeActiveWithPlotId",
      "isYieldRangeActiveWithPlotId(uint8,uint8,uint8,uint8,uint8,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(season)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotWidth)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotHeight)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tileArea)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(baseYield)),
        ethereum.Value.fromUnsignedBigInt(plotTypeIdEntered),
      ],
    );

    return result[0].toBoolean();
  }

  try_isYieldRangeActiveWithPlotId(
    season: i32,
    plotWidth: i32,
    plotHeight: i32,
    tileArea: i32,
    baseYield: i32,
    plotTypeIdEntered: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isYieldRangeActiveWithPlotId",
      "isYieldRangeActiveWithPlotId(uint8,uint8,uint8,uint8,uint8,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(season)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotWidth)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotHeight)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tileArea)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(baseYield)),
        ethereum.Value.fromUnsignedBigInt(plotTypeIdEntered),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isYieldRangeActiveWithPlotName(
    season: i32,
    plotWidth: i32,
    plotHeight: i32,
    tileArea: i32,
    baseYield: i32,
    plotType: string,
  ): boolean {
    let result = super.call(
      "isYieldRangeActiveWithPlotName",
      "isYieldRangeActiveWithPlotName(uint8,uint8,uint8,uint8,uint8,string):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(season)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotWidth)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotHeight)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tileArea)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(baseYield)),
        ethereum.Value.fromString(plotType),
      ],
    );

    return result[0].toBoolean();
  }

  try_isYieldRangeActiveWithPlotName(
    season: i32,
    plotWidth: i32,
    plotHeight: i32,
    tileArea: i32,
    baseYield: i32,
    plotType: string,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isYieldRangeActiveWithPlotName",
      "isYieldRangeActiveWithPlotName(uint8,uint8,uint8,uint8,uint8,string):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(season)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotWidth)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotHeight)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tileArea)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(baseYield)),
        ethereum.Value.fromString(plotType),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pausedGame(): boolean {
    let result = super.call("pausedGame", "pausedGame():(bool)", []);

    return result[0].toBoolean();
  }

  try_pausedGame(): ethereum.CallResult<boolean> {
    let result = super.tryCall("pausedGame", "pausedGame():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  poolAddress(): Address {
    let result = super.call("poolAddress", "poolAddress():(address)", []);

    return result[0].toAddress();
  }

  try_poolAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("poolAddress", "poolAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  roleRegistry(): Address {
    let result = super.call("roleRegistry", "roleRegistry():(address)", []);

    return result[0].toAddress();
  }

  try_roleRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall("roleRegistry", "roleRegistry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  systemStatus(): Address {
    let result = super.call("systemStatus", "systemStatus():(address)", []);

    return result[0].toAddress();
  }

  try_systemStatus(): ethereum.CallResult<Address> {
    let result = super.tryCall("systemStatus", "systemStatus():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  treasuryAddress(): Address {
    let result = super.call(
      "treasuryAddress",
      "treasuryAddress():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_treasuryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "treasuryAddress",
      "treasuryAddress():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  version(): YieldTable__versionResult {
    let result = super.call(
      "version",
      "version():(uint256,uint256,uint256)",
      [],
    );

    return new YieldTable__versionResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_version(): ethereum.CallResult<YieldTable__versionResult> {
    let result = super.tryCall(
      "version",
      "version():(uint256,uint256,uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new YieldTable__versionResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  versionGameUtil(): YieldTable__versionGameUtilResult {
    let result = super.call(
      "versionGameUtil",
      "versionGameUtil():(uint256,uint256,uint256)",
      [],
    );

    return new YieldTable__versionGameUtilResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_versionGameUtil(): ethereum.CallResult<YieldTable__versionGameUtilResult> {
    let result = super.tryCall(
      "versionGameUtil",
      "versionGameUtil():(uint256,uint256,uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new YieldTable__versionGameUtilResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  versionGuard(): YieldTable__versionGuardResult {
    let result = super.call(
      "versionGuard",
      "versionGuard():(uint256,uint256,uint256)",
      [],
    );

    return new YieldTable__versionGuardResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_versionGuard(): ethereum.CallResult<YieldTable__versionGuardResult> {
    let result = super.tryCall(
      "versionGuard",
      "versionGuard():(uint256,uint256,uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new YieldTable__versionGuardResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  versionSystemPointers(): YieldTable__versionSystemPointersResult {
    let result = super.call(
      "versionSystemPointers",
      "versionSystemPointers():(uint256,uint256,uint256)",
      [],
    );

    return new YieldTable__versionSystemPointersResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_versionSystemPointers(): ethereum.CallResult<YieldTable__versionSystemPointersResult> {
    let result = super.tryCall(
      "versionSystemPointers",
      "versionSystemPointers():(uint256,uint256,uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new YieldTable__versionSystemPointersResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  yieldRangeWithPlotTypeId(
    season: i32,
    plotWidth: i32,
    plotHeight: i32,
    tileArea: i32,
    baseYield: i32,
    plotTypeIdEntered: BigInt,
  ): YieldTable__yieldRangeWithPlotTypeIdResult {
    let result = super.call(
      "yieldRangeWithPlotTypeId",
      "yieldRangeWithPlotTypeId(uint8,uint8,uint8,uint8,uint8,uint256):(uint16,uint16)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(season)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotWidth)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotHeight)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tileArea)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(baseYield)),
        ethereum.Value.fromUnsignedBigInt(plotTypeIdEntered),
      ],
    );

    return new YieldTable__yieldRangeWithPlotTypeIdResult(
      result[0].toI32(),
      result[1].toI32(),
    );
  }

  try_yieldRangeWithPlotTypeId(
    season: i32,
    plotWidth: i32,
    plotHeight: i32,
    tileArea: i32,
    baseYield: i32,
    plotTypeIdEntered: BigInt,
  ): ethereum.CallResult<YieldTable__yieldRangeWithPlotTypeIdResult> {
    let result = super.tryCall(
      "yieldRangeWithPlotTypeId",
      "yieldRangeWithPlotTypeId(uint8,uint8,uint8,uint8,uint8,uint256):(uint16,uint16)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(season)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotWidth)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotHeight)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tileArea)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(baseYield)),
        ethereum.Value.fromUnsignedBigInt(plotTypeIdEntered),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new YieldTable__yieldRangeWithPlotTypeIdResult(
        value[0].toI32(),
        value[1].toI32(),
      ),
    );
  }

  yieldRangeWithPlotTypeName(
    season: i32,
    plotWidth: i32,
    plotHeight: i32,
    tileArea: i32,
    baseYield: i32,
    plotType: string,
  ): YieldTable__yieldRangeWithPlotTypeNameResult {
    let result = super.call(
      "yieldRangeWithPlotTypeName",
      "yieldRangeWithPlotTypeName(uint8,uint8,uint8,uint8,uint8,string):(uint16,uint16)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(season)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotWidth)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotHeight)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tileArea)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(baseYield)),
        ethereum.Value.fromString(plotType),
      ],
    );

    return new YieldTable__yieldRangeWithPlotTypeNameResult(
      result[0].toI32(),
      result[1].toI32(),
    );
  }

  try_yieldRangeWithPlotTypeName(
    season: i32,
    plotWidth: i32,
    plotHeight: i32,
    tileArea: i32,
    baseYield: i32,
    plotType: string,
  ): ethereum.CallResult<YieldTable__yieldRangeWithPlotTypeNameResult> {
    let result = super.tryCall(
      "yieldRangeWithPlotTypeName",
      "yieldRangeWithPlotTypeName(uint8,uint8,uint8,uint8,uint8,string):(uint16,uint16)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(season)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotWidth)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotHeight)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tileArea)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(baseYield)),
        ethereum.Value.fromString(plotType),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new YieldTable__yieldRangeWithPlotTypeNameResult(
        value[0].toI32(),
        value[1].toI32(),
      ),
    );
  }

  yieldTableId(
    season: i32,
    plotWidth: i32,
    plotHeight: i32,
    tileArea: i32,
    baseYield: i32,
    plotTypeIdEntered: BigInt,
  ): BigInt {
    let result = super.call(
      "yieldTableId",
      "yieldTableId(uint8,uint8,uint8,uint8,uint8,uint256):(uint48)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(season)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotWidth)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotHeight)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tileArea)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(baseYield)),
        ethereum.Value.fromUnsignedBigInt(plotTypeIdEntered),
      ],
    );

    return result[0].toBigInt();
  }

  try_yieldTableId(
    season: i32,
    plotWidth: i32,
    plotHeight: i32,
    tileArea: i32,
    baseYield: i32,
    plotTypeIdEntered: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "yieldTableId",
      "yieldTableId(uint8,uint8,uint8,uint8,uint8,uint256):(uint48)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(season)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotWidth)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(plotHeight)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tileArea)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(baseYield)),
        ethereum.Value.fromUnsignedBigInt(plotTypeIdEntered),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ActivateYieldConfigCall extends ethereum.Call {
  get inputs(): ActivateYieldConfigCall__Inputs {
    return new ActivateYieldConfigCall__Inputs(this);
  }

  get outputs(): ActivateYieldConfigCall__Outputs {
    return new ActivateYieldConfigCall__Outputs(this);
  }
}

export class ActivateYieldConfigCall__Inputs {
  _call: ActivateYieldConfigCall;

  constructor(call: ActivateYieldConfigCall) {
    this._call = call;
  }

  get season(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get plotWidth(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get plotHeight(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get tileArea(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get baseYield(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get plotType(): string {
    return this._call.inputValues[5].value.toString();
  }
}

export class ActivateYieldConfigCall__Outputs {
  _call: ActivateYieldConfigCall;

  constructor(call: ActivateYieldConfigCall) {
    this._call = call;
  }
}

export class AddYieldConfigCall extends ethereum.Call {
  get inputs(): AddYieldConfigCall__Inputs {
    return new AddYieldConfigCall__Inputs(this);
  }

  get outputs(): AddYieldConfigCall__Outputs {
    return new AddYieldConfigCall__Outputs(this);
  }
}

export class AddYieldConfigCall__Inputs {
  _call: AddYieldConfigCall;

  constructor(call: AddYieldConfigCall) {
    this._call = call;
  }

  get season(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get plotWidth(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get plotHeight(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get tileArea(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get baseYield(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get plotType(): string {
    return this._call.inputValues[5].value.toString();
  }

  get minYield(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get maxYield(): i32 {
    return this._call.inputValues[7].value.toI32();
  }

  get isActive(): boolean {
    return this._call.inputValues[8].value.toBoolean();
  }
}

export class AddYieldConfigCall__Outputs {
  _call: AddYieldConfigCall;

  constructor(call: AddYieldConfigCall) {
    this._call = call;
  }
}

export class DeactivateYieldConfigCall extends ethereum.Call {
  get inputs(): DeactivateYieldConfigCall__Inputs {
    return new DeactivateYieldConfigCall__Inputs(this);
  }

  get outputs(): DeactivateYieldConfigCall__Outputs {
    return new DeactivateYieldConfigCall__Outputs(this);
  }
}

export class DeactivateYieldConfigCall__Inputs {
  _call: DeactivateYieldConfigCall;

  constructor(call: DeactivateYieldConfigCall) {
    this._call = call;
  }

  get season(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get plotWidth(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get plotHeight(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get tileArea(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get baseYield(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get plotType(): string {
    return this._call.inputValues[5].value.toString();
  }
}

export class DeactivateYieldConfigCall__Outputs {
  _call: DeactivateYieldConfigCall;

  constructor(call: DeactivateYieldConfigCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get addressStoreAddress_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class TransferAddressStoreCall extends ethereum.Call {
  get inputs(): TransferAddressStoreCall__Inputs {
    return new TransferAddressStoreCall__Inputs(this);
  }

  get outputs(): TransferAddressStoreCall__Outputs {
    return new TransferAddressStoreCall__Outputs(this);
  }
}

export class TransferAddressStoreCall__Inputs {
  _call: TransferAddressStoreCall;

  constructor(call: TransferAddressStoreCall) {
    this._call = call;
  }

  get newAddressStore(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferAddressStoreCall__Outputs {
  _call: TransferAddressStoreCall;

  constructor(call: TransferAddressStoreCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateGuardAddressLogCall extends ethereum.Call {
  get inputs(): UpdateGuardAddressLogCall__Inputs {
    return new UpdateGuardAddressLogCall__Inputs(this);
  }

  get outputs(): UpdateGuardAddressLogCall__Outputs {
    return new UpdateGuardAddressLogCall__Outputs(this);
  }
}

export class UpdateGuardAddressLogCall__Inputs {
  _call: UpdateGuardAddressLogCall;

  constructor(call: UpdateGuardAddressLogCall) {
    this._call = call;
  }

  get guardAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get setting(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class UpdateGuardAddressLogCall__Outputs {
  _call: UpdateGuardAddressLogCall;

  constructor(call: UpdateGuardAddressLogCall) {
    this._call = call;
  }
}

export class UpdateYieldConfigCall extends ethereum.Call {
  get inputs(): UpdateYieldConfigCall__Inputs {
    return new UpdateYieldConfigCall__Inputs(this);
  }

  get outputs(): UpdateYieldConfigCall__Outputs {
    return new UpdateYieldConfigCall__Outputs(this);
  }
}

export class UpdateYieldConfigCall__Inputs {
  _call: UpdateYieldConfigCall;

  constructor(call: UpdateYieldConfigCall) {
    this._call = call;
  }

  get season(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get plotWidth(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get plotHeight(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get tileArea(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get baseYield(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get plotType(): string {
    return this._call.inputValues[5].value.toString();
  }

  get minYield(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get maxYield(): i32 {
    return this._call.inputValues[7].value.toI32();
  }
}

export class UpdateYieldConfigCall__Outputs {
  _call: UpdateYieldConfigCall;

  constructor(call: UpdateYieldConfigCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

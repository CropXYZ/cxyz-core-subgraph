// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ActivatedTimeBreakdown extends ethereum.Event {
  get params(): ActivatedTimeBreakdown__Params {
    return new ActivatedTimeBreakdown__Params(this);
  }
}

export class ActivatedTimeBreakdown__Params {
  _event: ActivatedTimeBreakdown;

  constructor(event: ActivatedTimeBreakdown) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get timeBreakdownId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get stakedElementNameHash(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get stakedElementName(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class AddedTimeBreakdown extends ethereum.Event {
  get params(): AddedTimeBreakdown__Params {
    return new AddedTimeBreakdown__Params(this);
  }
}

export class AddedTimeBreakdown__Params {
  _event: AddedTimeBreakdown;

  constructor(event: AddedTimeBreakdown) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get stakedElementNameHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get stakedElementName(): string {
    return this._event.parameters[2].value.toString();
  }

  get timeBreakdownId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get isActive(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }

  get nothingToStart(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get startToEarly(): i32 {
    return this._event.parameters[6].value.toI32();
  }

  get earlyToMature(): i32 {
    return this._event.parameters[7].value.toI32();
  }

  get matureToExpire(): i32 {
    return this._event.parameters[8].value.toI32();
  }

  get addressStoreNameHash(): Bytes {
    return this._event.parameters[9].value.toBytes();
  }

  get tokenPlotTypeId(): BigInt {
    return this._event.parameters[10].value.toBigInt();
  }
}

export class AddressStoreChanged extends ethereum.Event {
  get params(): AddressStoreChanged__Params {
    return new AddressStoreChanged__Params(this);
  }
}

export class AddressStoreChanged__Params {
  _event: AddressStoreChanged;

  constructor(event: AddressStoreChanged) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldAddressStore(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newAddressStore(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class DeactivatedTimeBreakdown extends ethereum.Event {
  get params(): DeactivatedTimeBreakdown__Params {
    return new DeactivatedTimeBreakdown__Params(this);
  }
}

export class DeactivatedTimeBreakdown__Params {
  _event: DeactivatedTimeBreakdown;

  constructor(event: DeactivatedTimeBreakdown) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get timeBreakdownId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get stakedElementNameHash(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get stakedElementName(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpdatedTimeBreakdown extends ethereum.Event {
  get params(): UpdatedTimeBreakdown__Params {
    return new UpdatedTimeBreakdown__Params(this);
  }
}

export class UpdatedTimeBreakdown__Params {
  _event: UpdatedTimeBreakdown;

  constructor(event: UpdatedTimeBreakdown) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get stakedElementNameHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get stakedElementName(): string {
    return this._event.parameters[2].value.toString();
  }

  get timeBreakdownId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get newNothingToStart(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get newStartToEarly(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get newEarlyToMature(): i32 {
    return this._event.parameters[6].value.toI32();
  }

  get newMatureToExpire(): i32 {
    return this._event.parameters[7].value.toI32();
  }

  get previousNothingToStart(): i32 {
    return this._event.parameters[8].value.toI32();
  }

  get previousStartToEarly(): i32 {
    return this._event.parameters[9].value.toI32();
  }

  get previousEarlyToMature(): i32 {
    return this._event.parameters[10].value.toI32();
  }

  get previousMatureToExpire(): i32 {
    return this._event.parameters[11].value.toI32();
  }
}

export class UpdatedTimeBreakdownAddress extends ethereum.Event {
  get params(): UpdatedTimeBreakdownAddress__Params {
    return new UpdatedTimeBreakdownAddress__Params(this);
  }
}

export class UpdatedTimeBreakdownAddress__Params {
  _event: UpdatedTimeBreakdownAddress;

  constructor(event: UpdatedTimeBreakdownAddress) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get stakedElementNameHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get stakedElementName(): string {
    return this._event.parameters[2].value.toString();
  }

  get timeBreakdownId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get newAddressStoreNameHash(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get previousAddressStoreNameHash(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TimeBreakdown__stakedElementTimeBreakdownSetResult {
  value0: i32;
  value1: i32;
  value2: i32;
  value3: i32;

  constructor(value0: i32, value1: i32, value2: i32, value3: i32) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0)),
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1)),
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2)),
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3)),
    );
    return map;
  }

  getValue0(): i32 {
    return this.value0;
  }

  getValue1(): i32 {
    return this.value1;
  }

  getValue2(): i32 {
    return this.value2;
  }

  getValue3(): i32 {
    return this.value3;
  }
}

export class TimeBreakdown__versionResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }
}

export class TimeBreakdown__versionGameUtilResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }
}

export class TimeBreakdown__versionSystemPointersResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }
}

export class TimeBreakdown extends ethereum.SmartContract {
  static bind(address: Address): TimeBreakdown {
    return new TimeBreakdown("TimeBreakdown", address);
  }

  APP_KEY_SKYONEER(): Bytes {
    let result = super.call(
      "APP_KEY_SKYONEER",
      "APP_KEY_SKYONEER():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_APP_KEY_SKYONEER(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "APP_KEY_SKYONEER",
      "APP_KEY_SKYONEER():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  APP_KEY_SYSTEM(): Bytes {
    let result = super.call("APP_KEY_SYSTEM", "APP_KEY_SYSTEM():(bytes32)", []);

    return result[0].toBytes();
  }

  try_APP_KEY_SYSTEM(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "APP_KEY_SYSTEM",
      "APP_KEY_SYSTEM():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_ENGINE_ADDRESS(): Bytes {
    let result = super.call(
      "AS_ENGINE_ADDRESS",
      "AS_ENGINE_ADDRESS():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_AS_ENGINE_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_ENGINE_ADDRESS",
      "AS_ENGINE_ADDRESS():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_GOLD_ADDRESS(): Bytes {
    let result = super.call(
      "AS_GOLD_ADDRESS",
      "AS_GOLD_ADDRESS():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_AS_GOLD_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_GOLD_ADDRESS",
      "AS_GOLD_ADDRESS():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_PLOT_ACTIONS_ADDRESS(): Bytes {
    let result = super.call(
      "AS_PLOT_ACTIONS_ADDRESS",
      "AS_PLOT_ACTIONS_ADDRESS():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_AS_PLOT_ACTIONS_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_PLOT_ACTIONS_ADDRESS",
      "AS_PLOT_ACTIONS_ADDRESS():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_PLOT_ADDRESS(): Bytes {
    let result = super.call(
      "AS_PLOT_ADDRESS",
      "AS_PLOT_ADDRESS():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_AS_PLOT_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_PLOT_ADDRESS",
      "AS_PLOT_ADDRESS():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_PLOT_METADATA_ADDRESS(): Bytes {
    let result = super.call(
      "AS_PLOT_METADATA_ADDRESS",
      "AS_PLOT_METADATA_ADDRESS():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_AS_PLOT_METADATA_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_PLOT_METADATA_ADDRESS",
      "AS_PLOT_METADATA_ADDRESS():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_PLOT_TYPE_ADDRESS(): Bytes {
    let result = super.call(
      "AS_PLOT_TYPE_ADDRESS",
      "AS_PLOT_TYPE_ADDRESS():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_AS_PLOT_TYPE_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_PLOT_TYPE_ADDRESS",
      "AS_PLOT_TYPE_ADDRESS():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_POOL_CORE_ADDRESS(): Bytes {
    let result = super.call(
      "AS_POOL_CORE_ADDRESS",
      "AS_POOL_CORE_ADDRESS():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_AS_POOL_CORE_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_POOL_CORE_ADDRESS",
      "AS_POOL_CORE_ADDRESS():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_POOL_DETAILS_ADDRESS(): Bytes {
    let result = super.call(
      "AS_POOL_DETAILS_ADDRESS",
      "AS_POOL_DETAILS_ADDRESS():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_AS_POOL_DETAILS_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_POOL_DETAILS_ADDRESS",
      "AS_POOL_DETAILS_ADDRESS():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_ROLE_REGISTRY_ADDRESS(): Bytes {
    let result = super.call(
      "AS_ROLE_REGISTRY_ADDRESS",
      "AS_ROLE_REGISTRY_ADDRESS():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_AS_ROLE_REGISTRY_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_ROLE_REGISTRY_ADDRESS",
      "AS_ROLE_REGISTRY_ADDRESS():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_STARTER_PACK_ACTIVATION_DEST_ADDRESS(): Bytes {
    let result = super.call(
      "AS_STARTER_PACK_ACTIVATION_DEST_ADDRESS",
      "AS_STARTER_PACK_ACTIVATION_DEST_ADDRESS():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_AS_STARTER_PACK_ACTIVATION_DEST_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_STARTER_PACK_ACTIVATION_DEST_ADDRESS",
      "AS_STARTER_PACK_ACTIVATION_DEST_ADDRESS():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_STARTER_PACK_ACTIVATION_SRC_ADDRESS(): Bytes {
    let result = super.call(
      "AS_STARTER_PACK_ACTIVATION_SRC_ADDRESS",
      "AS_STARTER_PACK_ACTIVATION_SRC_ADDRESS():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_AS_STARTER_PACK_ACTIVATION_SRC_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_STARTER_PACK_ACTIVATION_SRC_ADDRESS",
      "AS_STARTER_PACK_ACTIVATION_SRC_ADDRESS():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_STARTER_PACK_ADDRESS(): Bytes {
    let result = super.call(
      "AS_STARTER_PACK_ADDRESS",
      "AS_STARTER_PACK_ADDRESS():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_AS_STARTER_PACK_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_STARTER_PACK_ADDRESS",
      "AS_STARTER_PACK_ADDRESS():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_SYSTEM_STATUS_ADDRESS(): Bytes {
    let result = super.call(
      "AS_SYSTEM_STATUS_ADDRESS",
      "AS_SYSTEM_STATUS_ADDRESS():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_AS_SYSTEM_STATUS_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_SYSTEM_STATUS_ADDRESS",
      "AS_SYSTEM_STATUS_ADDRESS():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_TEAM_ADDRESS(): Bytes {
    let result = super.call(
      "AS_TEAM_ADDRESS",
      "AS_TEAM_ADDRESS():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_AS_TEAM_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_TEAM_ADDRESS",
      "AS_TEAM_ADDRESS():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_TIME_BREAKDOWN_ADDRESS(): Bytes {
    let result = super.call(
      "AS_TIME_BREAKDOWN_ADDRESS",
      "AS_TIME_BREAKDOWN_ADDRESS():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_AS_TIME_BREAKDOWN_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_TIME_BREAKDOWN_ADDRESS",
      "AS_TIME_BREAKDOWN_ADDRESS():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_TREASURY_ADDRESS(): Bytes {
    let result = super.call(
      "AS_TREASURY_ADDRESS",
      "AS_TREASURY_ADDRESS():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_AS_TREASURY_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_TREASURY_ADDRESS",
      "AS_TREASURY_ADDRESS():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AS_YIELD_TABLE_ADDRESS(): Bytes {
    let result = super.call(
      "AS_YIELD_TABLE_ADDRESS",
      "AS_YIELD_TABLE_ADDRESS():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_AS_YIELD_TABLE_ADDRESS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AS_YIELD_TABLE_ADDRESS",
      "AS_YIELD_TABLE_ADDRESS():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_DAPP_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "RR_DAPP_ADMIN_ROLE",
      "RR_DAPP_ADMIN_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_RR_DAPP_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "RR_DAPP_ADMIN_ROLE",
      "RR_DAPP_ADMIN_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_DAPP_PAUSER_ROLE(): Bytes {
    let result = super.call(
      "RR_DAPP_PAUSER_ROLE",
      "RR_DAPP_PAUSER_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_RR_DAPP_PAUSER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "RR_DAPP_PAUSER_ROLE",
      "RR_DAPP_PAUSER_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_DAPP_UPGRADER_ROLE(): Bytes {
    let result = super.call(
      "RR_DAPP_UPGRADER_ROLE",
      "RR_DAPP_UPGRADER_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_RR_DAPP_UPGRADER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "RR_DAPP_UPGRADER_ROLE",
      "RR_DAPP_UPGRADER_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_GAME_MINTER_ROLE(): Bytes {
    let result = super.call(
      "RR_GAME_MINTER_ROLE",
      "RR_GAME_MINTER_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_RR_GAME_MINTER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "RR_GAME_MINTER_ROLE",
      "RR_GAME_MINTER_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RR_GAME_ROLE(): Bytes {
    let result = super.call("RR_GAME_ROLE", "RR_GAME_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_RR_GAME_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("RR_GAME_ROLE", "RR_GAME_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  UPGRADE_INTERFACE_VERSION(): string {
    let result = super.call(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      [],
    );

    return result[0].toString();
  }

  try_UPGRADE_INTERFACE_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  addressStore(): Address {
    let result = super.call("addressStore", "addressStore():(address)", []);

    return result[0].toAddress();
  }

  try_addressStore(): ethereum.CallResult<Address> {
    let result = super.tryCall("addressStore", "addressStore():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  goldAddress(): Address {
    let result = super.call("goldAddress", "goldAddress():(address)", []);

    return result[0].toAddress();
  }

  try_goldAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("goldAddress", "goldAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isActiveStakedElement(stakedElementId: BigInt): boolean {
    let result = super.call(
      "isActiveStakedElement",
      "isActiveStakedElement(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(stakedElementId)],
    );

    return result[0].toBoolean();
  }

  try_isActiveStakedElement(
    stakedElementId: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isActiveStakedElement",
      "isActiveStakedElement(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(stakedElementId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isValidAndActiveStakedElement(stakedElementId: BigInt): boolean {
    let result = super.call(
      "isValidAndActiveStakedElement",
      "isValidAndActiveStakedElement(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(stakedElementId)],
    );

    return result[0].toBoolean();
  }

  try_isValidAndActiveStakedElement(
    stakedElementId: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isValidAndActiveStakedElement",
      "isValidAndActiveStakedElement(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(stakedElementId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isValidStakedElement(stakedElementId: BigInt): boolean {
    let result = super.call(
      "isValidStakedElement",
      "isValidStakedElement(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(stakedElementId)],
    );

    return result[0].toBoolean();
  }

  try_isValidStakedElement(
    stakedElementId: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isValidStakedElement",
      "isValidStakedElement(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(stakedElementId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pausedGame(): boolean {
    let result = super.call("pausedGame", "pausedGame():(bool)", []);

    return result[0].toBoolean();
  }

  try_pausedGame(): ethereum.CallResult<boolean> {
    let result = super.tryCall("pausedGame", "pausedGame():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  poolAddress(): Address {
    let result = super.call("poolAddress", "poolAddress():(address)", []);

    return result[0].toAddress();
  }

  try_poolAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("poolAddress", "poolAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  roleRegistry(): Address {
    let result = super.call("roleRegistry", "roleRegistry():(address)", []);

    return result[0].toAddress();
  }

  try_roleRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall("roleRegistry", "roleRegistry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakedElementIdToName(stakedElementId: BigInt): string {
    let result = super.call(
      "stakedElementIdToName",
      "stakedElementIdToName(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(stakedElementId)],
    );

    return result[0].toString();
  }

  try_stakedElementIdToName(
    stakedElementId: BigInt,
  ): ethereum.CallResult<string> {
    let result = super.tryCall(
      "stakedElementIdToName",
      "stakedElementIdToName(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(stakedElementId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  stakedElementNameToId(stakedElementName: string): BigInt {
    let result = super.call(
      "stakedElementNameToId",
      "stakedElementNameToId(string):(uint256)",
      [ethereum.Value.fromString(stakedElementName)],
    );

    return result[0].toBigInt();
  }

  try_stakedElementNameToId(
    stakedElementName: string,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakedElementNameToId",
      "stakedElementNameToId(string):(uint256)",
      [ethereum.Value.fromString(stakedElementName)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakedElementTimeBreakdownExists(stakedElementName: string): boolean {
    let result = super.call(
      "stakedElementTimeBreakdownExists",
      "stakedElementTimeBreakdownExists(string):(bool)",
      [ethereum.Value.fromString(stakedElementName)],
    );

    return result[0].toBoolean();
  }

  try_stakedElementTimeBreakdownExists(
    stakedElementName: string,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "stakedElementTimeBreakdownExists",
      "stakedElementTimeBreakdownExists(string):(bool)",
      [ethereum.Value.fromString(stakedElementName)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  stakedElementTimeBreakdownSet(
    stakedElementId: BigInt,
  ): TimeBreakdown__stakedElementTimeBreakdownSetResult {
    let result = super.call(
      "stakedElementTimeBreakdownSet",
      "stakedElementTimeBreakdownSet(uint256):(uint24,uint24,uint24,uint24)",
      [ethereum.Value.fromUnsignedBigInt(stakedElementId)],
    );

    return new TimeBreakdown__stakedElementTimeBreakdownSetResult(
      result[0].toI32(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toI32(),
    );
  }

  try_stakedElementTimeBreakdownSet(
    stakedElementId: BigInt,
  ): ethereum.CallResult<TimeBreakdown__stakedElementTimeBreakdownSetResult> {
    let result = super.tryCall(
      "stakedElementTimeBreakdownSet",
      "stakedElementTimeBreakdownSet(uint256):(uint24,uint24,uint24,uint24)",
      [ethereum.Value.fromUnsignedBigInt(stakedElementId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TimeBreakdown__stakedElementTimeBreakdownSetResult(
        value[0].toI32(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toI32(),
      ),
    );
  }

  stakedElementTokenAddress(stakedElementId: BigInt): Address {
    let result = super.call(
      "stakedElementTokenAddress",
      "stakedElementTokenAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(stakedElementId)],
    );

    return result[0].toAddress();
  }

  try_stakedElementTokenAddress(
    stakedElementId: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stakedElementTokenAddress",
      "stakedElementTokenAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(stakedElementId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakedElementsNames(): Array<string> {
    let result = super.call(
      "stakedElementsNames",
      "stakedElementsNames():(string[])",
      [],
    );

    return result[0].toStringArray();
  }

  try_stakedElementsNames(): ethereum.CallResult<Array<string>> {
    let result = super.tryCall(
      "stakedElementsNames",
      "stakedElementsNames():(string[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toStringArray());
  }

  systemStatus(): Address {
    let result = super.call("systemStatus", "systemStatus():(address)", []);

    return result[0].toAddress();
  }

  try_systemStatus(): ethereum.CallResult<Address> {
    let result = super.tryCall("systemStatus", "systemStatus():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalStakedElementTimeBreakdowns(): BigInt {
    let result = super.call(
      "totalStakedElementTimeBreakdowns",
      "totalStakedElementTimeBreakdowns():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalStakedElementTimeBreakdowns(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalStakedElementTimeBreakdowns",
      "totalStakedElementTimeBreakdowns():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treasuryAddress(): Address {
    let result = super.call(
      "treasuryAddress",
      "treasuryAddress():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_treasuryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "treasuryAddress",
      "treasuryAddress():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  version(): TimeBreakdown__versionResult {
    let result = super.call(
      "version",
      "version():(uint256,uint256,uint256)",
      [],
    );

    return new TimeBreakdown__versionResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_version(): ethereum.CallResult<TimeBreakdown__versionResult> {
    let result = super.tryCall(
      "version",
      "version():(uint256,uint256,uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TimeBreakdown__versionResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  versionGameUtil(): TimeBreakdown__versionGameUtilResult {
    let result = super.call(
      "versionGameUtil",
      "versionGameUtil():(uint256,uint256,uint256)",
      [],
    );

    return new TimeBreakdown__versionGameUtilResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_versionGameUtil(): ethereum.CallResult<TimeBreakdown__versionGameUtilResult> {
    let result = super.tryCall(
      "versionGameUtil",
      "versionGameUtil():(uint256,uint256,uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TimeBreakdown__versionGameUtilResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  versionSystemPointers(): TimeBreakdown__versionSystemPointersResult {
    let result = super.call(
      "versionSystemPointers",
      "versionSystemPointers():(uint256,uint256,uint256)",
      [],
    );

    return new TimeBreakdown__versionSystemPointersResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_versionSystemPointers(): ethereum.CallResult<TimeBreakdown__versionSystemPointersResult> {
    let result = super.tryCall(
      "versionSystemPointers",
      "versionSystemPointers():(uint256,uint256,uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TimeBreakdown__versionSystemPointersResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }
}

export class ActivateTimeBreakdownCall extends ethereum.Call {
  get inputs(): ActivateTimeBreakdownCall__Inputs {
    return new ActivateTimeBreakdownCall__Inputs(this);
  }

  get outputs(): ActivateTimeBreakdownCall__Outputs {
    return new ActivateTimeBreakdownCall__Outputs(this);
  }
}

export class ActivateTimeBreakdownCall__Inputs {
  _call: ActivateTimeBreakdownCall;

  constructor(call: ActivateTimeBreakdownCall) {
    this._call = call;
  }

  get stakedElementName(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class ActivateTimeBreakdownCall__Outputs {
  _call: ActivateTimeBreakdownCall;

  constructor(call: ActivateTimeBreakdownCall) {
    this._call = call;
  }
}

export class AddTimeBreakdownCall extends ethereum.Call {
  get inputs(): AddTimeBreakdownCall__Inputs {
    return new AddTimeBreakdownCall__Inputs(this);
  }

  get outputs(): AddTimeBreakdownCall__Outputs {
    return new AddTimeBreakdownCall__Outputs(this);
  }
}

export class AddTimeBreakdownCall__Inputs {
  _call: AddTimeBreakdownCall;

  constructor(call: AddTimeBreakdownCall) {
    this._call = call;
  }

  get stakedElementName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get addressStoreName(): string {
    return this._call.inputValues[1].value.toString();
  }

  get nothingToStart(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get startToEarly(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get earlyToMature(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get matureToExpire(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get isActive(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }
}

export class AddTimeBreakdownCall__Outputs {
  _call: AddTimeBreakdownCall;

  constructor(call: AddTimeBreakdownCall) {
    this._call = call;
  }
}

export class DeactivateTimeBreakdownCall extends ethereum.Call {
  get inputs(): DeactivateTimeBreakdownCall__Inputs {
    return new DeactivateTimeBreakdownCall__Inputs(this);
  }

  get outputs(): DeactivateTimeBreakdownCall__Outputs {
    return new DeactivateTimeBreakdownCall__Outputs(this);
  }
}

export class DeactivateTimeBreakdownCall__Inputs {
  _call: DeactivateTimeBreakdownCall;

  constructor(call: DeactivateTimeBreakdownCall) {
    this._call = call;
  }

  get stakedElementName(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class DeactivateTimeBreakdownCall__Outputs {
  _call: DeactivateTimeBreakdownCall;

  constructor(call: DeactivateTimeBreakdownCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get addressStoreAddress_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class TransferAddressStoreCall extends ethereum.Call {
  get inputs(): TransferAddressStoreCall__Inputs {
    return new TransferAddressStoreCall__Inputs(this);
  }

  get outputs(): TransferAddressStoreCall__Outputs {
    return new TransferAddressStoreCall__Outputs(this);
  }
}

export class TransferAddressStoreCall__Inputs {
  _call: TransferAddressStoreCall;

  constructor(call: TransferAddressStoreCall) {
    this._call = call;
  }

  get newAddressStore(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferAddressStoreCall__Outputs {
  _call: TransferAddressStoreCall;

  constructor(call: TransferAddressStoreCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateTimeBreakdownCall extends ethereum.Call {
  get inputs(): UpdateTimeBreakdownCall__Inputs {
    return new UpdateTimeBreakdownCall__Inputs(this);
  }

  get outputs(): UpdateTimeBreakdownCall__Outputs {
    return new UpdateTimeBreakdownCall__Outputs(this);
  }
}

export class UpdateTimeBreakdownCall__Inputs {
  _call: UpdateTimeBreakdownCall;

  constructor(call: UpdateTimeBreakdownCall) {
    this._call = call;
  }

  get stakedElementName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get nothingToStart(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get startToEarly(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get earlyToMature(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get matureToExpire(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class UpdateTimeBreakdownCall__Outputs {
  _call: UpdateTimeBreakdownCall;

  constructor(call: UpdateTimeBreakdownCall) {
    this._call = call;
  }
}

export class UpdateTimeBreakdownAddressCall extends ethereum.Call {
  get inputs(): UpdateTimeBreakdownAddressCall__Inputs {
    return new UpdateTimeBreakdownAddressCall__Inputs(this);
  }

  get outputs(): UpdateTimeBreakdownAddressCall__Outputs {
    return new UpdateTimeBreakdownAddressCall__Outputs(this);
  }
}

export class UpdateTimeBreakdownAddressCall__Inputs {
  _call: UpdateTimeBreakdownAddressCall;

  constructor(call: UpdateTimeBreakdownAddressCall) {
    this._call = call;
  }

  get stakedElementName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get addressStoreName(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class UpdateTimeBreakdownAddressCall__Outputs {
  _call: UpdateTimeBreakdownAddressCall;

  constructor(call: UpdateTimeBreakdownAddressCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
